{"ast":null,"code":"export default async function getFumenFromReplay(replayUrl) {\n  // Check if the URL is a valid Jstris replay URL\n  const target = \"jstris.jezevec10.com\";\n  if (!replayUrl.includes(target)) {\n    throw new Error(\"Invalid replay URL. It must be from jstris.jezevec10.com.\");\n  }\n  const parts = replayUrl.split(\"/\");\n  if (parts.length < 5 || parts[3] !== \"replay\") {\n    throw new Error(\"Invalid replay URL format.\");\n  }\n\n  // Extract replay ID\n  const id = parts[4];\n\n  // Fetch replay data using CORS proxy\n  const URL = \"https://jstris.jezevec10.com/replay/data?id=\".concat(id, \"&type=0\");\n  const proxyUrl = \"https://api.allorigins.win/get?url=\".concat(encodeURIComponent(URL));\n  console.log(proxyUrl);\n  fetch(proxyUrl).then(response => {\n    if (response.ok) return response.json();\n    throw new Error(\"Network response was not ok.\");\n  }).then(data => console.log(data.contents));\n  return null;\n  /*\r\n    try {\r\n  const replayResponse = await fetch(proxyUrl);\r\n  if (!replayResponse.ok) {\r\n    throw new Error(\"Failed to fetch replay data.\");\r\n  }\r\n    const replayData = await replayResponse.text();\r\n    // Compress the replay data for Fumen API compatibility\r\n  const compressedReplay = compressToEncodedURIComponent(replayData);\r\n    // Send the compressed replay to the Fumen API\r\n  const fumenResponse = await fetch(`https://fumen.tstman.net/jstris`, {\r\n    method: \"POST\",\r\n    headers: {\r\n      Accept: \"application/json\",\r\n      \"Content-Type\": \"application/json\",\r\n    },\r\n    body: JSON.stringify({ replay: compressedReplay }),\r\n  });\r\n    if (!fumenResponse.ok) {\r\n    throw new Error(\"Failed to convert replay to Fumen.\");\r\n  }\r\n    const fumenData = await fumenResponse.json();\r\n    // Return the Fumen string\r\n  return fumenData.fumen;\r\n  } catch (error) {\r\n  console.error(\"Error processing replay:\", error);\r\n  return null;\r\n  }\r\n  */\n}","map":{"version":3,"names":["getFumenFromReplay","replayUrl","target","includes","Error","parts","split","length","id","URL","concat","proxyUrl","encodeURIComponent","console","log","fetch","then","response","ok","json","data","contents"],"sources":["C:/Stuff/Github/peasea/src/scripts/upload.tsx"],"sourcesContent":["import { compressToEncodedURIComponent } from \"lz-string\";\r\n\r\nexport default async function getFumenFromReplay(replayUrl: string): Promise<string | null> {\r\n    // Check if the URL is a valid Jstris replay URL\r\n    const target = \"jstris.jezevec10.com\";\r\n    if (!replayUrl.includes(target)) {\r\n        throw new Error(\r\n            \"Invalid replay URL. It must be from jstris.jezevec10.com.\"\r\n        );\r\n    }\r\n\r\n    const parts = replayUrl.split(\"/\");\r\n    if (parts.length < 5 || parts[3] !== \"replay\") {\r\n        throw new Error(\"Invalid replay URL format.\");\r\n    }\r\n\r\n    // Extract replay ID\r\n    const id = parts[4];\r\n\r\n    // Fetch replay data using CORS proxy\r\n    const URL = `https://jstris.jezevec10.com/replay/data?id=${id}&type=0`\r\n    const proxyUrl = `https://api.allorigins.win/get?url=${encodeURIComponent(URL)}`;\r\n\r\n    console.log(proxyUrl);\r\n\r\n    fetch(proxyUrl)\r\n        .then((response) => {\r\n            if (response.ok) return response.json();\r\n            throw new Error(\"Network response was not ok.\");\r\n        })\r\n        .then((data) => console.log(data.contents));\r\n    return null;\r\n    /*\r\n  \r\n  try {\r\n    const replayResponse = await fetch(proxyUrl);\r\n    if (!replayResponse.ok) {\r\n      throw new Error(\"Failed to fetch replay data.\");\r\n    }\r\n\r\n    const replayData = await replayResponse.text();\r\n\r\n    // Compress the replay data for Fumen API compatibility\r\n    const compressedReplay = compressToEncodedURIComponent(replayData);\r\n\r\n    // Send the compressed replay to the Fumen API\r\n    const fumenResponse = await fetch(`https://fumen.tstman.net/jstris`, {\r\n      method: \"POST\",\r\n      headers: {\r\n        Accept: \"application/json\",\r\n        \"Content-Type\": \"application/json\",\r\n      },\r\n      body: JSON.stringify({ replay: compressedReplay }),\r\n    });\r\n\r\n    if (!fumenResponse.ok) {\r\n      throw new Error(\"Failed to convert replay to Fumen.\");\r\n    }\r\n\r\n    const fumenData = await fumenResponse.json();\r\n\r\n    // Return the Fumen string\r\n    return fumenData.fumen;\r\n  } catch (error) {\r\n    console.error(\"Error processing replay:\", error);\r\n    return null;\r\n  }\r\n    */\r\n}\r\n"],"mappings":"AAEA,eAAe,eAAeA,kBAAkBA,CAACC,SAAiB,EAA0B;EACxF;EACA,MAAMC,MAAM,GAAG,sBAAsB;EACrC,IAAI,CAACD,SAAS,CAACE,QAAQ,CAACD,MAAM,CAAC,EAAE;IAC7B,MAAM,IAAIE,KAAK,CACX,2DACJ,CAAC;EACL;EAEA,MAAMC,KAAK,GAAGJ,SAAS,CAACK,KAAK,CAAC,GAAG,CAAC;EAClC,IAAID,KAAK,CAACE,MAAM,GAAG,CAAC,IAAIF,KAAK,CAAC,CAAC,CAAC,KAAK,QAAQ,EAAE;IAC3C,MAAM,IAAID,KAAK,CAAC,4BAA4B,CAAC;EACjD;;EAEA;EACA,MAAMI,EAAE,GAAGH,KAAK,CAAC,CAAC,CAAC;;EAEnB;EACA,MAAMI,GAAG,kDAAAC,MAAA,CAAkDF,EAAE,YAAS;EACtE,MAAMG,QAAQ,yCAAAD,MAAA,CAAyCE,kBAAkB,CAACH,GAAG,CAAC,CAAE;EAEhFI,OAAO,CAACC,GAAG,CAACH,QAAQ,CAAC;EAErBI,KAAK,CAACJ,QAAQ,CAAC,CACVK,IAAI,CAAEC,QAAQ,IAAK;IAChB,IAAIA,QAAQ,CAACC,EAAE,EAAE,OAAOD,QAAQ,CAACE,IAAI,CAAC,CAAC;IACvC,MAAM,IAAIf,KAAK,CAAC,8BAA8B,CAAC;EACnD,CAAC,CAAC,CACDY,IAAI,CAAEI,IAAI,IAAKP,OAAO,CAACC,GAAG,CAACM,IAAI,CAACC,QAAQ,CAAC,CAAC;EAC/C,OAAO,IAAI;EACX;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAQA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}