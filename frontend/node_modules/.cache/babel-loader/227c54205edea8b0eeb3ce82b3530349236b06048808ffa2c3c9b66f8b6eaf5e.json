{"ast":null,"code":"var _jsxFileName = \"C:\\\\Stuff\\\\Github\\\\peasea\\\\frontend\\\\src\\\\pages\\\\SetPage\\\\SetPage.tsx\",\n  _s = $RefreshSig$();\nimport { useEffect } from \"react\";\nimport { pieces, normalizedSort, normalizeInput, getCombinations, getPermutations } from \"../../scripts/pieces\";\nimport classes from \"./SetPage.module.css\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst SetPage = _ref => {\n  _s();\n  let {\n    pc\n  } = _ref;\n  document.title = \"Benchmarking pieces.ts\";\n\n  // Define a larger test input for benchmarking\n  const largeInput = \"[TIJLSZTIJLSZTIJLSZTIJLSZ]c3\"; // Example larger input for testing (repeated pattern)\n  const largeSet = new Set([\"TIJLSZ\", \"STL\", \"JLO\", \"ZTI\", \"SZTI\", \"TIZL\", \"JLS\", \"OZL\", \"TI\", \"LZ\", \"JS\", \"ZST\"]);\n  useEffect(() => {\n    // Benchmark normalizeInput with larger input\n    console.time(\"normalizeInput (large input)\");\n    const normalized = normalizeInput(largeInput);\n    console.timeEnd(\"normalizeInput (large input)\");\n\n    // Benchmark normalizedSort with larger input\n    console.time(\"normalizedSort (large input)\");\n    const sorted = normalizedSort(largeInput);\n    console.timeEnd(\"normalizedSort (large input)\");\n\n    // Benchmark pieces (this will test the entire parsing and processing logic)\n    console.time(\"pieces (large input)\");\n    const piecesResult = pieces(largeInput);\n    console.timeEnd(\"pieces (large input)\");\n\n    // Benchmark getCombinations with a larger set\n    console.time(\"getCombinations (large set)\");\n    const combinations = getCombinations(largeSet, 4); // Test with larger combinations (length 4)\n    console.timeEnd(\"getCombinations (large set)\");\n\n    // Benchmark getPermutations with a larger set\n    console.time(\"getPermutations (large set)\");\n    const permutations = getPermutations(largeSet, 4); // Test with larger permutations (length 4)\n    console.timeEnd(\"getPermutations (large set)\");\n\n    // Optionally log the results\n    console.log(\"Normalized:\", normalized);\n    console.log(\"Sorted:\", sorted);\n    console.log(\"Pieces Result:\", piecesResult);\n    console.log(\"Combinations:\", combinations);\n    console.log(\"Permutations:\", permutations);\n  }, []);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: classes.container,\n    children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n      children: \"Benchmarking pieces.ts with Larger Inputs\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 48,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n      children: \"Check the console for performance results with larger data sets!\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 49,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 47,\n    columnNumber: 5\n  }, this);\n};\n_s(SetPage, \"OD7bBpZva5O2jO+Puf00hKivP7c=\");\n_c = SetPage;\nexport default SetPage;\nvar _c;\n$RefreshReg$(_c, \"SetPage\");","map":{"version":3,"names":["useEffect","pieces","normalizedSort","normalizeInput","getCombinations","getPermutations","classes","jsxDEV","_jsxDEV","SetPage","_ref","_s","pc","document","title","largeInput","largeSet","Set","console","time","normalized","timeEnd","sorted","piecesResult","combinations","permutations","log","className","container","children","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["C:/Stuff/Github/peasea/frontend/src/pages/SetPage/SetPage.tsx"],"sourcesContent":["import { useEffect } from \"react\";\r\nimport { pieces, normalizedSort, normalizeInput, getCombinations, getPermutations } from \"../../scripts/pieces\";\r\nimport classes from \"./SetPage.module.css\";\r\n\r\nconst SetPage = ({ pc }: { pc: any }) => {\r\n  document.title = \"Benchmarking pieces.ts\";\r\n\r\n  // Define a larger test input for benchmarking\r\n  const largeInput = \"[TIJLSZTIJLSZTIJLSZTIJLSZ]c3\"; // Example larger input for testing (repeated pattern)\r\n  const largeSet = new Set([\"TIJLSZ\", \"STL\", \"JLO\", \"ZTI\", \"SZTI\", \"TIZL\", \"JLS\", \"OZL\", \"TI\", \"LZ\", \"JS\", \"ZST\"]);\r\n\r\n  useEffect(() => {\r\n    // Benchmark normalizeInput with larger input\r\n    console.time(\"normalizeInput (large input)\");\r\n    const normalized = normalizeInput(largeInput);\r\n    console.timeEnd(\"normalizeInput (large input)\");\r\n\r\n    // Benchmark normalizedSort with larger input\r\n    console.time(\"normalizedSort (large input)\");\r\n    const sorted = normalizedSort(largeInput);\r\n    console.timeEnd(\"normalizedSort (large input)\");\r\n\r\n    // Benchmark pieces (this will test the entire parsing and processing logic)\r\n    console.time(\"pieces (large input)\");\r\n    const piecesResult = pieces(largeInput);\r\n    console.timeEnd(\"pieces (large input)\");\r\n\r\n    // Benchmark getCombinations with a larger set\r\n    console.time(\"getCombinations (large set)\");\r\n    const combinations = getCombinations(largeSet, 4);  // Test with larger combinations (length 4)\r\n    console.timeEnd(\"getCombinations (large set)\");\r\n\r\n    // Benchmark getPermutations with a larger set\r\n    console.time(\"getPermutations (large set)\");\r\n    const permutations = getPermutations(largeSet, 4);  // Test with larger permutations (length 4)\r\n    console.timeEnd(\"getPermutations (large set)\");\r\n\r\n    // Optionally log the results\r\n    console.log(\"Normalized:\", normalized);\r\n    console.log(\"Sorted:\", sorted);\r\n    console.log(\"Pieces Result:\", piecesResult);\r\n    console.log(\"Combinations:\", combinations);\r\n    console.log(\"Permutations:\", permutations);\r\n  }, []);\r\n\r\n  return (\r\n    <div className={classes.container}>\r\n      <h1>Benchmarking pieces.ts with Larger Inputs</h1>\r\n      <p>Check the console for performance results with larger data sets!</p>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default SetPage;\r\n"],"mappings":";;AAAA,SAASA,SAAS,QAAQ,OAAO;AACjC,SAASC,MAAM,EAAEC,cAAc,EAAEC,cAAc,EAAEC,eAAe,EAAEC,eAAe,QAAQ,sBAAsB;AAC/G,OAAOC,OAAO,MAAM,sBAAsB;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAE3C,MAAMC,OAAO,GAAGC,IAAA,IAAyB;EAAAC,EAAA;EAAA,IAAxB;IAAEC;EAAgB,CAAC,GAAAF,IAAA;EAClCG,QAAQ,CAACC,KAAK,GAAG,wBAAwB;;EAEzC;EACA,MAAMC,UAAU,GAAG,8BAA8B,CAAC,CAAC;EACnD,MAAMC,QAAQ,GAAG,IAAIC,GAAG,CAAC,CAAC,QAAQ,EAAE,KAAK,EAAE,KAAK,EAAE,KAAK,EAAE,MAAM,EAAE,MAAM,EAAE,KAAK,EAAE,KAAK,EAAE,IAAI,EAAE,IAAI,EAAE,IAAI,EAAE,KAAK,CAAC,CAAC;EAEhHjB,SAAS,CAAC,MAAM;IACd;IACAkB,OAAO,CAACC,IAAI,CAAC,8BAA8B,CAAC;IAC5C,MAAMC,UAAU,GAAGjB,cAAc,CAACY,UAAU,CAAC;IAC7CG,OAAO,CAACG,OAAO,CAAC,8BAA8B,CAAC;;IAE/C;IACAH,OAAO,CAACC,IAAI,CAAC,8BAA8B,CAAC;IAC5C,MAAMG,MAAM,GAAGpB,cAAc,CAACa,UAAU,CAAC;IACzCG,OAAO,CAACG,OAAO,CAAC,8BAA8B,CAAC;;IAE/C;IACAH,OAAO,CAACC,IAAI,CAAC,sBAAsB,CAAC;IACpC,MAAMI,YAAY,GAAGtB,MAAM,CAACc,UAAU,CAAC;IACvCG,OAAO,CAACG,OAAO,CAAC,sBAAsB,CAAC;;IAEvC;IACAH,OAAO,CAACC,IAAI,CAAC,6BAA6B,CAAC;IAC3C,MAAMK,YAAY,GAAGpB,eAAe,CAACY,QAAQ,EAAE,CAAC,CAAC,CAAC,CAAE;IACpDE,OAAO,CAACG,OAAO,CAAC,6BAA6B,CAAC;;IAE9C;IACAH,OAAO,CAACC,IAAI,CAAC,6BAA6B,CAAC;IAC3C,MAAMM,YAAY,GAAGpB,eAAe,CAACW,QAAQ,EAAE,CAAC,CAAC,CAAC,CAAE;IACpDE,OAAO,CAACG,OAAO,CAAC,6BAA6B,CAAC;;IAE9C;IACAH,OAAO,CAACQ,GAAG,CAAC,aAAa,EAAEN,UAAU,CAAC;IACtCF,OAAO,CAACQ,GAAG,CAAC,SAAS,EAAEJ,MAAM,CAAC;IAC9BJ,OAAO,CAACQ,GAAG,CAAC,gBAAgB,EAAEH,YAAY,CAAC;IAC3CL,OAAO,CAACQ,GAAG,CAAC,eAAe,EAAEF,YAAY,CAAC;IAC1CN,OAAO,CAACQ,GAAG,CAAC,eAAe,EAAED,YAAY,CAAC;EAC5C,CAAC,EAAE,EAAE,CAAC;EAEN,oBACEjB,OAAA;IAAKmB,SAAS,EAAErB,OAAO,CAACsB,SAAU;IAAAC,QAAA,gBAChCrB,OAAA;MAAAqB,QAAA,EAAI;IAAyC;MAAAC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAI,CAAC,eAClDzB,OAAA;MAAAqB,QAAA,EAAG;IAAgE;MAAAC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAG,CAAC;EAAA;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACpE,CAAC;AAEV,CAAC;AAACtB,EAAA,CA/CIF,OAAO;AAAAyB,EAAA,GAAPzB,OAAO;AAiDb,eAAeA,OAAO;AAAC,IAAAyB,EAAA;AAAAC,YAAA,CAAAD,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}