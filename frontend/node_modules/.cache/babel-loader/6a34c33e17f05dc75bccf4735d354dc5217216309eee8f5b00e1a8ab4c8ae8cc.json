{"ast":null,"code":"export default async function getFumenFromReplay(replayUrl) {\n  const target = \"jstris.jezevec10.com\";\n  if (!replayUrl.includes(target)) {\n    throw new Error(\"Invalid replay URL. It must be from jstris.jezevec10.com.\");\n  }\n  const parts = replayUrl.split(\"/\");\n  if (parts.length < 5 || parts[3] !== \"replay\") {\n    throw new Error(\"Invalid replay URL format.\");\n  }\n  const id = parts[4];\n  const URL = \"https://jstris.jezevec10.com/replay/data?id=\".concat(id, \"&type=0\");\n  const proxyUrl = \"https://api.allorigins.win/get?url=\".concat(encodeURIComponent(URL));\n  try {\n    const response = await fetch(proxyUrl);\n    if (!response.ok) throw new Error(\"Failed to fetch replay data.\");\n    const data = await response.json();\n    const replayData = JSON.parse(data.contents).d;\n\n    // Log raw replay data\n    console.log(\"Raw Replay Data:\", replayData);\n    const compressedData = compressToEncodedURIComponent(replayData);\n\n    // Log compressed data\n    console.log(\"Compressed Replay Data:\", compressedData);\n\n    // Send to TSTMan\n    const tstmanResponse = await fetch(\"https://fumen.tstman.net/jstris\", {\n      method: \"POST\",\n      headers: {\n        Accept: \"application/json\",\n        \"Content-Type\": \"application/json\"\n      },\n      body: JSON.stringify({\n        replay: compressedData\n      })\n    });\n    if (!tstmanResponse.ok) {\n      const errorData = await tstmanResponse.text();\n      console.error(\"TSTMan API Error Response:\", errorData);\n      throw new Error(\"Failed to fetch Fumen data from TSTMan.\");\n    }\n    const tstmanData = await tstmanResponse.json();\n    console.log(\"Fumen Data:\", tstmanData);\n    return tstmanData.fumen;\n  } catch (error) {\n    console.error(\"Error in getFumenFromReplay:\", error);\n    throw error;\n  }\n}","map":{"version":3,"names":["getFumenFromReplay","replayUrl","target","includes","Error","parts","split","length","id","URL","concat","proxyUrl","encodeURIComponent","response","fetch","ok","data","json","replayData","JSON","parse","contents","d","console","log","compressedData","compressToEncodedURIComponent","tstmanResponse","method","headers","Accept","body","stringify","replay","errorData","text","error","tstmanData","fumen"],"sources":["C:/Stuff/Github/peasea/src/scripts/upload.tsx"],"sourcesContent":["export default async function getFumenFromReplay(replayUrl: string): Promise<any | null> {\r\n  const target = \"jstris.jezevec10.com\";\r\n  if (!replayUrl.includes(target)) {\r\n      throw new Error(\"Invalid replay URL. It must be from jstris.jezevec10.com.\");\r\n  }\r\n\r\n  const parts = replayUrl.split(\"/\");\r\n  if (parts.length < 5 || parts[3] !== \"replay\") {\r\n      throw new Error(\"Invalid replay URL format.\");\r\n  }\r\n\r\n  const id = parts[4];\r\n  const URL = `https://jstris.jezevec10.com/replay/data?id=${id}&type=0`;\r\n  const proxyUrl = `https://api.allorigins.win/get?url=${encodeURIComponent(URL)}`;\r\n\r\n  try {\r\n      const response = await fetch(proxyUrl);\r\n      if (!response.ok) throw new Error(\"Failed to fetch replay data.\");\r\n      const data = await response.json();\r\n      const replayData = JSON.parse(data.contents).d;\r\n\r\n      // Log raw replay data\r\n      console.log(\"Raw Replay Data:\", replayData);\r\n\r\n      const compressedData = compressToEncodedURIComponent(replayData);\r\n\r\n      // Log compressed data\r\n      console.log(\"Compressed Replay Data:\", compressedData);\r\n\r\n      // Send to TSTMan\r\n      const tstmanResponse = await fetch(`https://fumen.tstman.net/jstris`, {\r\n          method: \"POST\",\r\n          headers: {\r\n              Accept: \"application/json\",\r\n              \"Content-Type\": \"application/json\",\r\n          },\r\n          body: JSON.stringify({ replay: compressedData }),\r\n      });\r\n\r\n      if (!tstmanResponse.ok) {\r\n          const errorData = await tstmanResponse.text();\r\n          console.error(\"TSTMan API Error Response:\", errorData);\r\n          throw new Error(\"Failed to fetch Fumen data from TSTMan.\");\r\n      }\r\n\r\n      const tstmanData = await tstmanResponse.json();\r\n      console.log(\"Fumen Data:\", tstmanData);\r\n\r\n      return tstmanData.fumen;\r\n\r\n  } catch (error) {\r\n      console.error(\"Error in getFumenFromReplay:\", error);\r\n      throw error;\r\n  }\r\n}\r\n"],"mappings":"AAAA,eAAe,eAAeA,kBAAkBA,CAACC,SAAiB,EAAuB;EACvF,MAAMC,MAAM,GAAG,sBAAsB;EACrC,IAAI,CAACD,SAAS,CAACE,QAAQ,CAACD,MAAM,CAAC,EAAE;IAC7B,MAAM,IAAIE,KAAK,CAAC,2DAA2D,CAAC;EAChF;EAEA,MAAMC,KAAK,GAAGJ,SAAS,CAACK,KAAK,CAAC,GAAG,CAAC;EAClC,IAAID,KAAK,CAACE,MAAM,GAAG,CAAC,IAAIF,KAAK,CAAC,CAAC,CAAC,KAAK,QAAQ,EAAE;IAC3C,MAAM,IAAID,KAAK,CAAC,4BAA4B,CAAC;EACjD;EAEA,MAAMI,EAAE,GAAGH,KAAK,CAAC,CAAC,CAAC;EACnB,MAAMI,GAAG,kDAAAC,MAAA,CAAkDF,EAAE,YAAS;EACtE,MAAMG,QAAQ,yCAAAD,MAAA,CAAyCE,kBAAkB,CAACH,GAAG,CAAC,CAAE;EAEhF,IAAI;IACA,MAAMI,QAAQ,GAAG,MAAMC,KAAK,CAACH,QAAQ,CAAC;IACtC,IAAI,CAACE,QAAQ,CAACE,EAAE,EAAE,MAAM,IAAIX,KAAK,CAAC,8BAA8B,CAAC;IACjE,MAAMY,IAAI,GAAG,MAAMH,QAAQ,CAACI,IAAI,CAAC,CAAC;IAClC,MAAMC,UAAU,GAAGC,IAAI,CAACC,KAAK,CAACJ,IAAI,CAACK,QAAQ,CAAC,CAACC,CAAC;;IAE9C;IACAC,OAAO,CAACC,GAAG,CAAC,kBAAkB,EAAEN,UAAU,CAAC;IAE3C,MAAMO,cAAc,GAAGC,6BAA6B,CAACR,UAAU,CAAC;;IAEhE;IACAK,OAAO,CAACC,GAAG,CAAC,yBAAyB,EAAEC,cAAc,CAAC;;IAEtD;IACA,MAAME,cAAc,GAAG,MAAMb,KAAK,oCAAoC;MAClEc,MAAM,EAAE,MAAM;MACdC,OAAO,EAAE;QACLC,MAAM,EAAE,kBAAkB;QAC1B,cAAc,EAAE;MACpB,CAAC;MACDC,IAAI,EAAEZ,IAAI,CAACa,SAAS,CAAC;QAAEC,MAAM,EAAER;MAAe,CAAC;IACnD,CAAC,CAAC;IAEF,IAAI,CAACE,cAAc,CAACZ,EAAE,EAAE;MACpB,MAAMmB,SAAS,GAAG,MAAMP,cAAc,CAACQ,IAAI,CAAC,CAAC;MAC7CZ,OAAO,CAACa,KAAK,CAAC,4BAA4B,EAAEF,SAAS,CAAC;MACtD,MAAM,IAAI9B,KAAK,CAAC,yCAAyC,CAAC;IAC9D;IAEA,MAAMiC,UAAU,GAAG,MAAMV,cAAc,CAACV,IAAI,CAAC,CAAC;IAC9CM,OAAO,CAACC,GAAG,CAAC,aAAa,EAAEa,UAAU,CAAC;IAEtC,OAAOA,UAAU,CAACC,KAAK;EAE3B,CAAC,CAAC,OAAOF,KAAK,EAAE;IACZb,OAAO,CAACa,KAAK,CAAC,8BAA8B,EAAEA,KAAK,CAAC;IACpD,MAAMA,KAAK;EACf;AACF","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}