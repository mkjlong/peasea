{"ast":null,"code":"var _jsxFileName = \"C:\\\\Stuff\\\\Github\\\\peasea\\\\frontend\\\\src\\\\pages\\\\SetPage\\\\SetPage.tsx\",\n  _s = $RefreshSig$();\nimport { useEffect, useState } from \"react\";\nimport { normalizeInput } from \"../../scripts/pieces\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst SetPage = _ref => {\n  _s();\n  let {\n    pc\n  } = _ref;\n  const [benchmarks, setBenchmarks] = useState([]);\n\n  // Function to generate a large input string with a specific size\n  const generateTestCase = size => {\n    const pieces = \"TIJLOSZ\"; // The character set we're working with\n    let result = \"\";\n    for (let i = 0; i < size; i++) {\n      result += pieces[Math.floor(Math.random() * pieces.length)];\n    }\n    return result;\n  };\n\n  // Function to run the benchmark and store results\n  const runBenchmark = () => {\n    const testCases = [{\n      size: 100,\n      label: \"100 chars\"\n    }, {\n      size: 500,\n      label: \"500 chars\"\n    }, {\n      size: 1000,\n      label: \"1000 chars\"\n    }, {\n      size: 5000,\n      label: \"5000 chars\"\n    }, {\n      size: 10000,\n      label: \"10000 chars\"\n    }];\n    const results = [];\n    testCases.forEach(_ref2 => {\n      let {\n        size,\n        label\n      } = _ref2;\n      const input = generateTestCase(size);\n      const start = performance.now(); // Start time measurement\n      const normalized = normalizeInput(input); // Run the normalization\n      const end = performance.now(); // End time measurement\n\n      results.push({\n        label,\n        duration: end - start,\n        size,\n        normalizedOutput: normalized.substring(0, 50) // Just show the first 50 chars of output for brevity\n      });\n    });\n    setBenchmarks(results); // Store benchmark results\n  };\n  useEffect(() => {\n    runBenchmark();\n  }, []); // Run benchmark when the component is mounted\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n      children: \"Benchmark Results for normalizeInput\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 54,\n      columnNumber: 11\n    }, this), benchmarks.length > 0 && /*#__PURE__*/_jsxDEV(\"table\", {\n      children: [/*#__PURE__*/_jsxDEV(\"thead\", {\n        children: /*#__PURE__*/_jsxDEV(\"tr\", {\n          children: [/*#__PURE__*/_jsxDEV(\"th\", {\n            children: \"Test Case\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 59,\n            columnNumber: 19\n          }, this), /*#__PURE__*/_jsxDEV(\"th\", {\n            children: \"Input Size\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 60,\n            columnNumber: 19\n          }, this), /*#__PURE__*/_jsxDEV(\"th\", {\n            children: \"Duration (ms)\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 61,\n            columnNumber: 19\n          }, this), /*#__PURE__*/_jsxDEV(\"th\", {\n            children: \"Normalized Output (First 50 chars)\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 62,\n            columnNumber: 19\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 58,\n          columnNumber: 17\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 57,\n        columnNumber: 15\n      }, this), /*#__PURE__*/_jsxDEV(\"tbody\", {\n        children: benchmarks.map((benchmark, index) => /*#__PURE__*/_jsxDEV(\"tr\", {\n          children: [/*#__PURE__*/_jsxDEV(\"td\", {\n            children: benchmark.label\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 68,\n            columnNumber: 21\n          }, this), /*#__PURE__*/_jsxDEV(\"td\", {\n            children: benchmark.size\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 69,\n            columnNumber: 21\n          }, this), /*#__PURE__*/_jsxDEV(\"td\", {\n            children: benchmark.duration.toFixed(5)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 70,\n            columnNumber: 21\n          }, this), /*#__PURE__*/_jsxDEV(\"td\", {\n            children: benchmark.normalizedOutput\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 71,\n            columnNumber: 21\n          }, this)]\n        }, index, true, {\n          fileName: _jsxFileName,\n          lineNumber: 67,\n          columnNumber: 19\n        }, this))\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 65,\n        columnNumber: 15\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 56,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 53,\n    columnNumber: 9\n  }, this);\n};\n_s(SetPage, \"vlUu+NseiyytEE0xl4hctmhyw+8=\");\n_c = SetPage;\nexport default SetPage;\nvar _c;\n$RefreshReg$(_c, \"SetPage\");","map":{"version":3,"names":["useEffect","useState","normalizeInput","jsxDEV","_jsxDEV","SetPage","_ref","_s","pc","benchmarks","setBenchmarks","generateTestCase","size","pieces","result","i","Math","floor","random","length","runBenchmark","testCases","label","results","forEach","_ref2","input","start","performance","now","normalized","end","push","duration","normalizedOutput","substring","children","fileName","_jsxFileName","lineNumber","columnNumber","map","benchmark","index","toFixed","_c","$RefreshReg$"],"sources":["C:/Stuff/Github/peasea/frontend/src/pages/SetPage/SetPage.tsx"],"sourcesContent":["import { useEffect, useState } from \"react\";\r\nimport { pieces, normalizedSort, normalizeInput, getCombinations, getPermutations } from \"../../scripts/pieces\";\r\nimport classes from \"./SetPage.module.css\";\r\n\r\nconst SetPage = ({ pc }: { pc: any }) => {\r\n      const [benchmarks, setBenchmarks] = useState<any[]>([]);\r\n    \r\n      // Function to generate a large input string with a specific size\r\n      const generateTestCase = (size: number): string => {\r\n        const pieces = \"TIJLOSZ\"; // The character set we're working with\r\n        let result = \"\";\r\n        for (let i = 0; i < size; i++) {\r\n          result += pieces[Math.floor(Math.random() * pieces.length)];\r\n        }\r\n        return result;\r\n      };\r\n    \r\n      // Function to run the benchmark and store results\r\n      const runBenchmark = () => {\r\n        const testCases = [\r\n          { size: 100, label: \"100 chars\" },\r\n          { size: 500, label: \"500 chars\" },\r\n          { size: 1000, label: \"1000 chars\" },\r\n          { size: 5000, label: \"5000 chars\" },\r\n          { size: 10000, label: \"10000 chars\" },\r\n        ];\r\n    \r\n        const results: any[] = [];\r\n    \r\n        testCases.forEach(({ size, label }) => {\r\n          const input = generateTestCase(size);\r\n    \r\n          const start = performance.now(); // Start time measurement\r\n          const normalized = normalizeInput(input); // Run the normalization\r\n          const end = performance.now(); // End time measurement\r\n    \r\n          results.push({\r\n            label,\r\n            duration: end - start,\r\n            size,\r\n            normalizedOutput: normalized.substring(0, 50), // Just show the first 50 chars of output for brevity\r\n          });\r\n        });\r\n    \r\n        setBenchmarks(results); // Store benchmark results\r\n      };\r\n    \r\n      useEffect(() => {\r\n        runBenchmark();\r\n      }, []); // Run benchmark when the component is mounted\r\n    \r\n      return (\r\n        <div>\r\n          <h1>Benchmark Results for normalizeInput</h1>\r\n          {benchmarks.length > 0 && (\r\n            <table>\r\n              <thead>\r\n                <tr>\r\n                  <th>Test Case</th>\r\n                  <th>Input Size</th>\r\n                  <th>Duration (ms)</th>\r\n                  <th>Normalized Output (First 50 chars)</th>\r\n                </tr>\r\n              </thead>\r\n              <tbody>\r\n                {benchmarks.map((benchmark, index) => (\r\n                  <tr key={index}>\r\n                    <td>{benchmark.label}</td>\r\n                    <td>{benchmark.size}</td>\r\n                    <td>{benchmark.duration.toFixed(5)}</td>\r\n                    <td>{benchmark.normalizedOutput}</td>\r\n                  </tr>\r\n                ))}\r\n              </tbody>\r\n            </table>\r\n          )}\r\n        </div>\r\n      );\r\n    };\r\n    \r\n    export default SetPage;\r\n    "],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}