{"ast":null,"code":"import { compressToEncodedURIComponent } from \"lz-string\";\nexport default async function getFumenFromReplay(replayUrl) {\n  // Check if the URL is a valid Jstris replay URL\n  const target = \"jstris.jezevec10.com\";\n  if (!replayUrl.includes(target)) {\n    throw new Error(\"Invalid replay URL. It must be from jstris.jezevec10.com.\");\n  }\n  const parts = replayUrl.split(\"/\");\n  if (parts.length < 5 || parts[3] !== \"replay\") {\n    throw new Error(\"Invalid replay URL format.\");\n  }\n\n  // Extract replay ID\n  const id = parts[4];\n\n  // Fetch replay data using CORS proxy\n  const URL = \"https://jstris.jezevec10.com/replay/data?id=\".concat(id, \"&type=0\");\n  const proxyUrl = \"https://api.allorigins.win/get?url=\".concat(encodeURIComponent(URL));\n  const response = await fetch(proxyUrl);\n  if (!response.ok) throw new Error(\"Network response was not ok.\");\n  const data = await response.json();\n  const replayData = JSON.parse(data.contents).d;\n\n  // Compress the replay data for Fumen API compatibility\n  const compressedReplay = compressToEncodedURIComponent(replayData);\n  console.log(compressedReplay);\n\n  // Send the compressed replay to the Fumen API\n  const fumenResponse = await fetch(\"https://fumen.tstman.net/jstris\", {\n    method: \"POST\",\n    headers: {\n      Accept: \"application/json\",\n      \"Content-Type\": \"application/json\"\n    },\n    body: JSON.stringify({\n      replay: compressedReplay\n    })\n  });\n  if (!fumenResponse.ok) {\n    throw new Error(\"Failed to convert replay to Fumen.\");\n  }\n  const fumenData = await fumenResponse.json();\n  return fumenData;\n}","map":{"version":3,"names":["compressToEncodedURIComponent","getFumenFromReplay","replayUrl","target","includes","Error","parts","split","length","id","URL","concat","proxyUrl","encodeURIComponent","response","fetch","ok","data","json","replayData","JSON","parse","contents","d","compressedReplay","console","log","fumenResponse","method","headers","Accept","body","stringify","replay","fumenData"],"sources":["C:/Stuff/Github/peasea/src/scripts/upload.tsx"],"sourcesContent":["import { compressToEncodedURIComponent } from \"lz-string\";\r\n\r\nexport default async function getFumenFromReplay(replayUrl: string): Promise<any | null> {\r\n    // Check if the URL is a valid Jstris replay URL\r\n    const target = \"jstris.jezevec10.com\";\r\n    if (!replayUrl.includes(target)) {\r\n        throw new Error(\r\n            \"Invalid replay URL. It must be from jstris.jezevec10.com.\"\r\n        );\r\n    }\r\n    const parts = replayUrl.split(\"/\");\r\n    if (parts.length < 5 || parts[3] !== \"replay\") {\r\n        throw new Error(\"Invalid replay URL format.\");\r\n    }\r\n\r\n    // Extract replay ID\r\n    const id = parts[4];\r\n\r\n    // Fetch replay data using CORS proxy\r\n    const URL = `https://jstris.jezevec10.com/replay/data?id=${id}&type=0`\r\n    const proxyUrl = `https://api.allorigins.win/get?url=${encodeURIComponent(URL)}`;\r\n\r\n\r\n    const response = await fetch(proxyUrl);\r\n    if (!response.ok) throw new Error(\"Network response was not ok.\");\r\n    const data = await response.json();\r\n    \r\n    const replayData = JSON.parse(data.contents).d;\r\n    \r\n    // Compress the replay data for Fumen API compatibility\r\n    const compressedReplay = compressToEncodedURIComponent(replayData);\r\n\r\n    console.log(compressedReplay);\r\n    \r\n\r\n    // Send the compressed replay to the Fumen API\r\n    const fumenResponse = await fetch(`https://fumen.tstman.net/jstris`, {\r\n      method: \"POST\",\r\n      headers: {\r\n        Accept: \"application/json\",\r\n        \"Content-Type\": \"application/json\",\r\n      },\r\n      body: JSON.stringify({ replay: compressedReplay }),\r\n    });\r\n\r\n    if (!fumenResponse.ok) {\r\n      throw new Error(\"Failed to convert replay to Fumen.\");\r\n    }\r\n\r\n    const fumenData = await fumenResponse.json();\r\n\r\n    return fumenData;\r\n}\r\n"],"mappings":"AAAA,SAASA,6BAA6B,QAAQ,WAAW;AAEzD,eAAe,eAAeC,kBAAkBA,CAACC,SAAiB,EAAuB;EACrF;EACA,MAAMC,MAAM,GAAG,sBAAsB;EACrC,IAAI,CAACD,SAAS,CAACE,QAAQ,CAACD,MAAM,CAAC,EAAE;IAC7B,MAAM,IAAIE,KAAK,CACX,2DACJ,CAAC;EACL;EACA,MAAMC,KAAK,GAAGJ,SAAS,CAACK,KAAK,CAAC,GAAG,CAAC;EAClC,IAAID,KAAK,CAACE,MAAM,GAAG,CAAC,IAAIF,KAAK,CAAC,CAAC,CAAC,KAAK,QAAQ,EAAE;IAC3C,MAAM,IAAID,KAAK,CAAC,4BAA4B,CAAC;EACjD;;EAEA;EACA,MAAMI,EAAE,GAAGH,KAAK,CAAC,CAAC,CAAC;;EAEnB;EACA,MAAMI,GAAG,kDAAAC,MAAA,CAAkDF,EAAE,YAAS;EACtE,MAAMG,QAAQ,yCAAAD,MAAA,CAAyCE,kBAAkB,CAACH,GAAG,CAAC,CAAE;EAGhF,MAAMI,QAAQ,GAAG,MAAMC,KAAK,CAACH,QAAQ,CAAC;EACtC,IAAI,CAACE,QAAQ,CAACE,EAAE,EAAE,MAAM,IAAIX,KAAK,CAAC,8BAA8B,CAAC;EACjE,MAAMY,IAAI,GAAG,MAAMH,QAAQ,CAACI,IAAI,CAAC,CAAC;EAElC,MAAMC,UAAU,GAAGC,IAAI,CAACC,KAAK,CAACJ,IAAI,CAACK,QAAQ,CAAC,CAACC,CAAC;;EAE9C;EACA,MAAMC,gBAAgB,GAAGxB,6BAA6B,CAACmB,UAAU,CAAC;EAElEM,OAAO,CAACC,GAAG,CAACF,gBAAgB,CAAC;;EAG7B;EACA,MAAMG,aAAa,GAAG,MAAMZ,KAAK,oCAAoC;IACnEa,MAAM,EAAE,MAAM;IACdC,OAAO,EAAE;MACPC,MAAM,EAAE,kBAAkB;MAC1B,cAAc,EAAE;IAClB,CAAC;IACDC,IAAI,EAAEX,IAAI,CAACY,SAAS,CAAC;MAAEC,MAAM,EAAET;IAAiB,CAAC;EACnD,CAAC,CAAC;EAEF,IAAI,CAACG,aAAa,CAACX,EAAE,EAAE;IACrB,MAAM,IAAIX,KAAK,CAAC,oCAAoC,CAAC;EACvD;EAEA,MAAM6B,SAAS,GAAG,MAAMP,aAAa,CAACT,IAAI,CAAC,CAAC;EAE5C,OAAOgB,SAAS;AACpB","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}