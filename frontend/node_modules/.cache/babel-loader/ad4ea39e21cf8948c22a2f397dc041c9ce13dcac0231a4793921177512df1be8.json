{"ast":null,"code":"var _jsxFileName = \"C:\\\\Stuff\\\\Github\\\\peasea\\\\frontend\\\\src\\\\pages\\\\SetPage\\\\SetPage.tsx\",\n  _s = $RefreshSig$();\nimport { useEffect } from \"react\";\nimport { pieces, normalizedSort, normalizeInput, getCombinations, getPermutations } from \"../../scripts/pieces\";\nimport classes from \"./SetPage.module.css\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst SetPage = _ref => {\n  _s();\n  let {\n    pc\n  } = _ref;\n  document.title = \"Benchmarking pieces.ts\";\n\n  // Define the test input to benchmark\n  const testInput = \"[TIJ]c2\"; // Example input for testing\n  const testSet = new Set([\"TIJ\", \"SZT\", \"LOSZ\", \"XYZ\"]);\n  useEffect(() => {\n    // Benchmark normalizeInput\n    console.time(\"normalizeInput\");\n    const normalized = normalizeInput(testInput);\n    console.timeEnd(\"normalizeInput\");\n\n    // Benchmark normalizedSort\n    console.time(\"normalizedSort\");\n    const sorted = normalizedSort(testInput);\n    console.timeEnd(\"normalizedSort\");\n\n    // Benchmark pieces (this will test the entire parsing and processing logic)\n    console.time(\"pieces (single input)\");\n    const piecesResult = pieces(testInput);\n    console.timeEnd(\"pieces (single input)\");\n\n    // Benchmark getCombinations\n    console.time(\"getCombinations\");\n    const combinations = getCombinations(testSet, 2); // Test with length 2 combinations\n    console.timeEnd(\"getCombinations\");\n\n    // Benchmark getPermutations\n    console.time(\"getPermutations\");\n    const permutations = getPermutations(testSet, 2); // Test with length 2 permutations\n    console.timeEnd(\"getPermutations\");\n\n    // Optionally log the results\n    console.log(\"Normalized:\", normalized);\n    console.log(\"Sorted:\", sorted);\n    console.log(\"Pieces Result:\", piecesResult);\n    console.log(\"Combinations:\", combinations);\n    console.log(\"Permutations:\", permutations);\n  }, []);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: classes.container,\n    children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n      children: \"Benchmarking pieces.ts\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 48,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n      children: \"Check the console for performance results!\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 49,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 47,\n    columnNumber: 5\n  }, this);\n};\n_s(SetPage, \"OD7bBpZva5O2jO+Puf00hKivP7c=\");\n_c = SetPage;\nexport default SetPage;\nvar _c;\n$RefreshReg$(_c, \"SetPage\");","map":{"version":3,"names":["useEffect","pieces","normalizedSort","normalizeInput","getCombinations","getPermutations","classes","jsxDEV","_jsxDEV","SetPage","_ref","_s","pc","document","title","testInput","testSet","Set","console","time","normalized","timeEnd","sorted","piecesResult","combinations","permutations","log","className","container","children","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["C:/Stuff/Github/peasea/frontend/src/pages/SetPage/SetPage.tsx"],"sourcesContent":["import { useEffect } from \"react\";\r\nimport { pieces, normalizedSort, normalizeInput, getCombinations, getPermutations } from \"../../scripts/pieces\";\r\nimport classes from \"./SetPage.module.css\";\r\n\r\nconst SetPage = ({ pc }: { pc: any }) => {\r\n  document.title = \"Benchmarking pieces.ts\";\r\n\r\n  // Define the test input to benchmark\r\n  const testInput = \"[TIJ]c2\"; // Example input for testing\r\n  const testSet = new Set([\"TIJ\", \"SZT\", \"LOSZ\", \"XYZ\"]);\r\n\r\n  useEffect(() => {\r\n    // Benchmark normalizeInput\r\n    console.time(\"normalizeInput\");\r\n    const normalized = normalizeInput(testInput);\r\n    console.timeEnd(\"normalizeInput\");\r\n\r\n    // Benchmark normalizedSort\r\n    console.time(\"normalizedSort\");\r\n    const sorted = normalizedSort(testInput);\r\n    console.timeEnd(\"normalizedSort\");\r\n\r\n    // Benchmark pieces (this will test the entire parsing and processing logic)\r\n    console.time(\"pieces (single input)\");\r\n    const piecesResult = pieces(testInput);\r\n    console.timeEnd(\"pieces (single input)\");\r\n\r\n    // Benchmark getCombinations\r\n    console.time(\"getCombinations\");\r\n    const combinations = getCombinations(testSet, 2);  // Test with length 2 combinations\r\n    console.timeEnd(\"getCombinations\");\r\n\r\n    // Benchmark getPermutations\r\n    console.time(\"getPermutations\");\r\n    const permutations = getPermutations(testSet, 2);  // Test with length 2 permutations\r\n    console.timeEnd(\"getPermutations\");\r\n\r\n    // Optionally log the results\r\n    console.log(\"Normalized:\", normalized);\r\n    console.log(\"Sorted:\", sorted);\r\n    console.log(\"Pieces Result:\", piecesResult);\r\n    console.log(\"Combinations:\", combinations);\r\n    console.log(\"Permutations:\", permutations);\r\n  }, []);\r\n\r\n  return (\r\n    <div className={classes.container}>\r\n      <h1>Benchmarking pieces.ts</h1>\r\n      <p>Check the console for performance results!</p>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default SetPage;\r\n"],"mappings":";;AAAA,SAASA,SAAS,QAAQ,OAAO;AACjC,SAASC,MAAM,EAAEC,cAAc,EAAEC,cAAc,EAAEC,eAAe,EAAEC,eAAe,QAAQ,sBAAsB;AAC/G,OAAOC,OAAO,MAAM,sBAAsB;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAE3C,MAAMC,OAAO,GAAGC,IAAA,IAAyB;EAAAC,EAAA;EAAA,IAAxB;IAAEC;EAAgB,CAAC,GAAAF,IAAA;EAClCG,QAAQ,CAACC,KAAK,GAAG,wBAAwB;;EAEzC;EACA,MAAMC,SAAS,GAAG,SAAS,CAAC,CAAC;EAC7B,MAAMC,OAAO,GAAG,IAAIC,GAAG,CAAC,CAAC,KAAK,EAAE,KAAK,EAAE,MAAM,EAAE,KAAK,CAAC,CAAC;EAEtDjB,SAAS,CAAC,MAAM;IACd;IACAkB,OAAO,CAACC,IAAI,CAAC,gBAAgB,CAAC;IAC9B,MAAMC,UAAU,GAAGjB,cAAc,CAACY,SAAS,CAAC;IAC5CG,OAAO,CAACG,OAAO,CAAC,gBAAgB,CAAC;;IAEjC;IACAH,OAAO,CAACC,IAAI,CAAC,gBAAgB,CAAC;IAC9B,MAAMG,MAAM,GAAGpB,cAAc,CAACa,SAAS,CAAC;IACxCG,OAAO,CAACG,OAAO,CAAC,gBAAgB,CAAC;;IAEjC;IACAH,OAAO,CAACC,IAAI,CAAC,uBAAuB,CAAC;IACrC,MAAMI,YAAY,GAAGtB,MAAM,CAACc,SAAS,CAAC;IACtCG,OAAO,CAACG,OAAO,CAAC,uBAAuB,CAAC;;IAExC;IACAH,OAAO,CAACC,IAAI,CAAC,iBAAiB,CAAC;IAC/B,MAAMK,YAAY,GAAGpB,eAAe,CAACY,OAAO,EAAE,CAAC,CAAC,CAAC,CAAE;IACnDE,OAAO,CAACG,OAAO,CAAC,iBAAiB,CAAC;;IAElC;IACAH,OAAO,CAACC,IAAI,CAAC,iBAAiB,CAAC;IAC/B,MAAMM,YAAY,GAAGpB,eAAe,CAACW,OAAO,EAAE,CAAC,CAAC,CAAC,CAAE;IACnDE,OAAO,CAACG,OAAO,CAAC,iBAAiB,CAAC;;IAElC;IACAH,OAAO,CAACQ,GAAG,CAAC,aAAa,EAAEN,UAAU,CAAC;IACtCF,OAAO,CAACQ,GAAG,CAAC,SAAS,EAAEJ,MAAM,CAAC;IAC9BJ,OAAO,CAACQ,GAAG,CAAC,gBAAgB,EAAEH,YAAY,CAAC;IAC3CL,OAAO,CAACQ,GAAG,CAAC,eAAe,EAAEF,YAAY,CAAC;IAC1CN,OAAO,CAACQ,GAAG,CAAC,eAAe,EAAED,YAAY,CAAC;EAC5C,CAAC,EAAE,EAAE,CAAC;EAEN,oBACEjB,OAAA;IAAKmB,SAAS,EAAErB,OAAO,CAACsB,SAAU;IAAAC,QAAA,gBAChCrB,OAAA;MAAAqB,QAAA,EAAI;IAAsB;MAAAC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAI,CAAC,eAC/BzB,OAAA;MAAAqB,QAAA,EAAG;IAA0C;MAAAC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAG,CAAC;EAAA;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OAC9C,CAAC;AAEV,CAAC;AAACtB,EAAA,CA/CIF,OAAO;AAAAyB,EAAA,GAAPzB,OAAO;AAiDb,eAAeA,OAAO;AAAC,IAAAyB,EAAA;AAAAC,YAAA,CAAAD,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}