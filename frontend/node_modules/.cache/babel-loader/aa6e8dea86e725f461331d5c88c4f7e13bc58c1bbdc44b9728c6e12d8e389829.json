{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.parseRotation = exports.parseRotationName = exports.Rotation = exports.parsePiece = exports.parsePieceName = exports.isMinoPiece = exports.Piece = void 0;\nvar Piece;\n(function (Piece) {\n  Piece[Piece[\"Empty\"] = 0] = \"Empty\";\n  Piece[Piece[\"I\"] = 1] = \"I\";\n  Piece[Piece[\"L\"] = 2] = \"L\";\n  Piece[Piece[\"O\"] = 3] = \"O\";\n  Piece[Piece[\"Z\"] = 4] = \"Z\";\n  Piece[Piece[\"T\"] = 5] = \"T\";\n  Piece[Piece[\"J\"] = 6] = \"J\";\n  Piece[Piece[\"S\"] = 7] = \"S\";\n  Piece[Piece[\"Gray\"] = 8] = \"Gray\";\n})(Piece = exports.Piece || (exports.Piece = {}));\nfunction isMinoPiece(piece) {\n  return piece !== Piece.Empty && piece !== Piece.Gray;\n}\nexports.isMinoPiece = isMinoPiece;\nfunction parsePieceName(piece) {\n  switch (piece) {\n    case Piece.I:\n      return 'I';\n    case Piece.L:\n      return 'L';\n    case Piece.O:\n      return 'O';\n    case Piece.Z:\n      return 'Z';\n    case Piece.T:\n      return 'T';\n    case Piece.J:\n      return 'J';\n    case Piece.S:\n      return 'S';\n    case Piece.Gray:\n      return 'X';\n    case Piece.Empty:\n      return '_';\n  }\n  throw new Error(\"Unknown piece: \".concat(piece));\n}\nexports.parsePieceName = parsePieceName;\nfunction parsePiece(piece) {\n  switch (piece.toUpperCase()) {\n    case 'I':\n      return Piece.I;\n    case 'L':\n      return Piece.L;\n    case 'O':\n      return Piece.O;\n    case 'Z':\n      return Piece.Z;\n    case 'T':\n      return Piece.T;\n    case 'J':\n      return Piece.J;\n    case 'S':\n      return Piece.S;\n    case 'X':\n    case 'GRAY':\n      return Piece.Gray;\n    case ' ':\n    case '_':\n    case 'EMPTY':\n      return Piece.Empty;\n  }\n  throw new Error(\"Unknown piece: \".concat(piece));\n}\nexports.parsePiece = parsePiece;\nvar Rotation;\n(function (Rotation) {\n  Rotation[Rotation[\"Spawn\"] = 0] = \"Spawn\";\n  Rotation[Rotation[\"Right\"] = 1] = \"Right\";\n  Rotation[Rotation[\"Reverse\"] = 2] = \"Reverse\";\n  Rotation[Rotation[\"Left\"] = 3] = \"Left\";\n})(Rotation = exports.Rotation || (exports.Rotation = {}));\nfunction parseRotationName(rotation) {\n  switch (rotation) {\n    case Rotation.Spawn:\n      return 'spawn';\n    case Rotation.Left:\n      return 'left';\n    case Rotation.Right:\n      return 'right';\n    case Rotation.Reverse:\n      return 'reverse';\n  }\n  throw new Error(\"Unknown rotation: \".concat(rotation));\n}\nexports.parseRotationName = parseRotationName;\nfunction parseRotation(rotation) {\n  switch (rotation.toLowerCase()) {\n    case 'spawn':\n      return Rotation.Spawn;\n    case 'left':\n      return Rotation.Left;\n    case 'right':\n      return Rotation.Right;\n    case 'reverse':\n      return Rotation.Reverse;\n  }\n  throw new Error(\"Unknown rotation: \".concat(rotation));\n}\nexports.parseRotation = parseRotation;","map":{"version":3,"names":["Object","defineProperty","exports","value","parseRotation","parseRotationName","Rotation","parsePiece","parsePieceName","isMinoPiece","Piece","piece","Empty","Gray","I","L","O","Z","T","J","S","Error","concat","toUpperCase","rotation","Spawn","Left","Right","Reverse","toLowerCase"],"sources":["C:/Stuff/Github/peasea/node_modules/tetris-fumen/lib/defines.js"],"sourcesContent":["\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.parseRotation = exports.parseRotationName = exports.Rotation = exports.parsePiece = exports.parsePieceName = exports.isMinoPiece = exports.Piece = void 0;\nvar Piece;\n(function (Piece) {\n    Piece[Piece[\"Empty\"] = 0] = \"Empty\";\n    Piece[Piece[\"I\"] = 1] = \"I\";\n    Piece[Piece[\"L\"] = 2] = \"L\";\n    Piece[Piece[\"O\"] = 3] = \"O\";\n    Piece[Piece[\"Z\"] = 4] = \"Z\";\n    Piece[Piece[\"T\"] = 5] = \"T\";\n    Piece[Piece[\"J\"] = 6] = \"J\";\n    Piece[Piece[\"S\"] = 7] = \"S\";\n    Piece[Piece[\"Gray\"] = 8] = \"Gray\";\n})(Piece = exports.Piece || (exports.Piece = {}));\nfunction isMinoPiece(piece) {\n    return piece !== Piece.Empty && piece !== Piece.Gray;\n}\nexports.isMinoPiece = isMinoPiece;\nfunction parsePieceName(piece) {\n    switch (piece) {\n        case Piece.I:\n            return 'I';\n        case Piece.L:\n            return 'L';\n        case Piece.O:\n            return 'O';\n        case Piece.Z:\n            return 'Z';\n        case Piece.T:\n            return 'T';\n        case Piece.J:\n            return 'J';\n        case Piece.S:\n            return 'S';\n        case Piece.Gray:\n            return 'X';\n        case Piece.Empty:\n            return '_';\n    }\n    throw new Error(\"Unknown piece: \".concat(piece));\n}\nexports.parsePieceName = parsePieceName;\nfunction parsePiece(piece) {\n    switch (piece.toUpperCase()) {\n        case 'I':\n            return Piece.I;\n        case 'L':\n            return Piece.L;\n        case 'O':\n            return Piece.O;\n        case 'Z':\n            return Piece.Z;\n        case 'T':\n            return Piece.T;\n        case 'J':\n            return Piece.J;\n        case 'S':\n            return Piece.S;\n        case 'X':\n        case 'GRAY':\n            return Piece.Gray;\n        case ' ':\n        case '_':\n        case 'EMPTY':\n            return Piece.Empty;\n    }\n    throw new Error(\"Unknown piece: \".concat(piece));\n}\nexports.parsePiece = parsePiece;\nvar Rotation;\n(function (Rotation) {\n    Rotation[Rotation[\"Spawn\"] = 0] = \"Spawn\";\n    Rotation[Rotation[\"Right\"] = 1] = \"Right\";\n    Rotation[Rotation[\"Reverse\"] = 2] = \"Reverse\";\n    Rotation[Rotation[\"Left\"] = 3] = \"Left\";\n})(Rotation = exports.Rotation || (exports.Rotation = {}));\nfunction parseRotationName(rotation) {\n    switch (rotation) {\n        case Rotation.Spawn:\n            return 'spawn';\n        case Rotation.Left:\n            return 'left';\n        case Rotation.Right:\n            return 'right';\n        case Rotation.Reverse:\n            return 'reverse';\n    }\n    throw new Error(\"Unknown rotation: \".concat(rotation));\n}\nexports.parseRotationName = parseRotationName;\nfunction parseRotation(rotation) {\n    switch (rotation.toLowerCase()) {\n        case 'spawn':\n            return Rotation.Spawn;\n        case 'left':\n            return Rotation.Left;\n        case 'right':\n            return Rotation.Right;\n        case 'reverse':\n            return Rotation.Reverse;\n    }\n    throw new Error(\"Unknown rotation: \".concat(rotation));\n}\nexports.parseRotation = parseRotation;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"script","externalDependencies":[]}