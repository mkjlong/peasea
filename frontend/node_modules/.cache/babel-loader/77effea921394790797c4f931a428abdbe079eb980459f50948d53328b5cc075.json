{"ast":null,"code":"function checkPieces(queue, pieces) {\n  console.log(queue);\n\n  // Remove non-useful characters (mostly [])\n  pieces = pieces.replaceAll(\"*\", \"[TIJLOSZ]\");\n  pieces = pieces.replaceAll(/[^\\[\\]^!TIJLOSZ0-7]/g, \"\");\n  for (let [_, set, count = 1] of Array.from(pieces.matchAll(/((?<=\\[)[TIJLOSZ]{0,7}(?=\\])|[TIJLOSZ])\\]?(?:([!0-7]))?/g))) {\n    if (set.startsWith(\"^\")) set = \"TIJLOSZ\".split(\"\").filter(piece => !set.includes(piece)).join(\"\");\n    count = count === \"!\" ? set.length : Number(count);\n    console.log(set, count);\n    if (count > set.length || count > queue.length) return false;\n    console.log(set, count);\n  }\n  return true;\n}\n\n/*// Main method to check if a queue belongs to a set\r\n  export default function pieces(queue: string, set: string): boolean {\r\n    console.log(`Queue: ${queue}, Set: ${set}`);\r\n    var [pieces, modifiers] = set.split('{');\r\n    if(modifiers?.endsWith('}'))modifiers = modifiers.slice(0, modifiers.length - 1);\r\n    console.log(`Pieces: ${pieces}, Modifiers: ${modifiers}`);\r\n    \r\n    const queuePieces = pieces.trim();\r\n    return true;\r\n  }\r\n  \r\n  \r\n  \r\n  console.log(pieces(\"IJLS\", \"[IJLS]!{S<3}\"));\r\n  */\nexport default checkPieces;","map":{"version":3,"names":["checkPieces","queue","pieces","console","log","replaceAll","_","set","count","Array","from","matchAll","startsWith","split","filter","piece","includes","join","length","Number"],"sources":["C:/Stuff/Github/peasea/src/scripts/pieces.tsx"],"sourcesContent":["function checkPieces(queue: string, pieces: string): boolean {\r\n    console.log(queue);\r\n    \r\n    // Remove non-useful characters (mostly [])\r\n    pieces = pieces.replaceAll(\"*\", \"[TIJLOSZ]\");\r\n    pieces = pieces.replaceAll(/[^\\[\\]^!TIJLOSZ0-7]/g, \"\");\r\n\r\n    for (let [_, set, count = 1] of Array.from(pieces.matchAll(/((?<=\\[)[TIJLOSZ]{0,7}(?=\\])|[TIJLOSZ])\\]?(?:([!0-7]))?/g))) {\r\n        \r\n        if (set.startsWith(\"^\")) set = \"TIJLOSZ\".split(\"\").filter(piece => !set.includes(piece)).join(\"\");\r\n        count = count === \"!\" ? set.length : Number(count);\r\n\r\n        console.log(set,count);\r\n        if(count > set.length || count > queue.length)return false;\r\n\r\n        console.log(set,count);\r\n        \r\n    }\r\n\r\n    return true;\r\n}\r\n\r\n/*// Main method to check if a queue belongs to a set\r\n  export default function pieces(queue: string, set: string): boolean {\r\n    console.log(`Queue: ${queue}, Set: ${set}`);\r\n    var [pieces, modifiers] = set.split('{');\r\n    if(modifiers?.endsWith('}'))modifiers = modifiers.slice(0, modifiers.length - 1);\r\n    console.log(`Pieces: ${pieces}, Modifiers: ${modifiers}`);\r\n    \r\n    const queuePieces = pieces.trim();\r\n    return true;\r\n  }\r\n  \r\n  \r\n  \r\n  console.log(pieces(\"IJLS\", \"[IJLS]!{S<3}\"));\r\n  */\r\nexport default checkPieces;\r\n"],"mappings":"AAAA,SAASA,WAAWA,CAACC,KAAa,EAAEC,MAAc,EAAW;EACzDC,OAAO,CAACC,GAAG,CAACH,KAAK,CAAC;;EAElB;EACAC,MAAM,GAAGA,MAAM,CAACG,UAAU,CAAC,GAAG,EAAE,WAAW,CAAC;EAC5CH,MAAM,GAAGA,MAAM,CAACG,UAAU,CAAC,sBAAsB,EAAE,EAAE,CAAC;EAEtD,KAAK,IAAI,CAACC,CAAC,EAAEC,GAAG,EAAEC,KAAK,GAAG,CAAC,CAAC,IAAIC,KAAK,CAACC,IAAI,CAACR,MAAM,CAACS,QAAQ,CAAC,0DAA0D,CAAC,CAAC,EAAE;IAErH,IAAIJ,GAAG,CAACK,UAAU,CAAC,GAAG,CAAC,EAAEL,GAAG,GAAG,SAAS,CAACM,KAAK,CAAC,EAAE,CAAC,CAACC,MAAM,CAACC,KAAK,IAAI,CAACR,GAAG,CAACS,QAAQ,CAACD,KAAK,CAAC,CAAC,CAACE,IAAI,CAAC,EAAE,CAAC;IACjGT,KAAK,GAAGA,KAAK,KAAK,GAAG,GAAGD,GAAG,CAACW,MAAM,GAAGC,MAAM,CAACX,KAAK,CAAC;IAElDL,OAAO,CAACC,GAAG,CAACG,GAAG,EAACC,KAAK,CAAC;IACtB,IAAGA,KAAK,GAAGD,GAAG,CAACW,MAAM,IAAIV,KAAK,GAAGP,KAAK,CAACiB,MAAM,EAAC,OAAO,KAAK;IAE1Df,OAAO,CAACC,GAAG,CAACG,GAAG,EAACC,KAAK,CAAC;EAE1B;EAEA,OAAO,IAAI;AACf;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAeR,WAAW","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}