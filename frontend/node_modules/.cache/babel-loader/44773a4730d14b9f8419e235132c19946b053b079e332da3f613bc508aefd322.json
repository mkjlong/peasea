{"ast":null,"code":"/*import { compressToEncodedURIComponent } from \"lz-string\";\r\nexport default async function getFumenFromReplay(replayUrl: string): Promise<any | null> {\r\n  const target = \"jstris.jezevec10.com\";\r\n  if (!replayUrl.includes(target)) {\r\n      throw new Error(\"Invalid replay URL. It must be from jstris.jezevec10.com.\");\r\n  }\r\n\r\n  const parts = replayUrl.split(\"/\");\r\n  if (parts.length < 5 || parts[3] !== \"replay\") {\r\n      throw new Error(\"Invalid replay URL format.\");\r\n  }\r\n\r\n  const id = parts[4];\r\n  const URL = `https://jstris.jezevec10.com/replay/data?id=${id}&type=0`;\r\n  const proxyUrl = `https://api.allorigins.win/get?url=${encodeURIComponent(URL)}`;\r\n\r\n  try {\r\n      const response = await fetch(proxyUrl);\r\n      if (!response.ok) throw new Error(\"Failed to fetch replay data.\");\r\n      const data = await response.json();\r\n      const replayData = JSON.parse(data.contents).d;\r\n\r\n      // Log raw replay data\r\n      console.log(\"Raw Replay Data:\", replayData);\r\n\r\n      const compressedData = compressToEncodedURIComponent(replayData);\r\n\r\n      // Log compressed data\r\n      console.log(\"Compressed Replay Data:\", compressedData);\r\n\r\n      // Send to TSTMan\r\n      const tstmanResponse = await fetch(`https://fumen.tstman.net/jstris`, {\r\n          method: \"POST\",\r\n          headers: {\r\n              Accept: \"application/json\",\r\n              \"Content-Type\": \"application/json\",\r\n          },\r\n          body: JSON.stringify({ replay: compressedData }),\r\n      });\r\n\r\n      if (!tstmanResponse.ok) {\r\n          const errorData = await tstmanResponse.text();\r\n          console.error(\"TSTMan API Error Response:\", errorData);\r\n          throw new Error(\"Failed to fetch Fumen data from TSTMan.\");\r\n      }\r\n\r\n      const tstmanData = await tstmanResponse.json();\r\n      console.log(\"Fumen Data:\", tstmanData);\r\n\r\n      return tstmanData.fumen;\r\n\r\n  } catch (error) {\r\n      console.error(\"Error in getFumenFromReplay:\", error);\r\n      throw error;\r\n  }\r\n}\r\n*/\n\nimport { compressToEncodedURIComponent } from \"lz-string\";\nexport default async function parseReplay(txt) {\n  const target = \"jstris.jezevec10.com\";\n  if (txt.indexOf(target) < 0) return codeToFumen(txt);\n  const parts = txt.split(\"/\");\n  if (parts.length < 5) {\n    throw new Error(\"\");\n  }\n  if (parts[3] != \"replay\" || !parts[2].endsWith(target)) {\n    throw new Error(\"\");\n  }\n  let id = parts[4];\n  if (parts.length > 5) {\n    id = parts[5];\n  }\n  const url = \"https://corsproxy.io/?\".concat(encodeURIComponent(\"https://\".concat(parts[2], \"/replay/data?id=\").concat(id, \"&type=0\")));\n  fetch(url).then(response => {\n    if (!response.ok) {\n      throw new Error(\"\");\n    }\n    response.text().then(text => {\n      const comp = compressToEncodedURIComponent(text);\n      console.log(comp);\n      return codeToFumen(comp);\n    });\n  });\n  //return null;\n}\nfunction codeToFumen(replayCode) {\n  fetch(\"https://fumen.tstman.net/jstris\", {\n    method: \"POST\",\n    headers: {\n      Accept: \"application/json\",\n      \"Content-Type\": \"application/json\"\n    },\n    body: \"replay=\".concat(replayCode)\n  }).then(response => {\n    if (!response.ok) {\n      throw new Error(\"\");\n    } else {\n      response.json().then(data => {\n        return data.fumen;\n        //return parseFumen(data.fumen);\n      });\n    }\n  });\n  //return null;\n}","map":{"version":3,"names":["compressToEncodedURIComponent","parseReplay","txt","target","indexOf","codeToFumen","parts","split","length","Error","endsWith","id","url","concat","encodeURIComponent","fetch","then","response","ok","text","comp","console","log","replayCode","method","headers","Accept","body","json","data","fumen"],"sources":["C:/Stuff/Github/peasea/src/scripts/upload.tsx"],"sourcesContent":["/*import { compressToEncodedURIComponent } from \"lz-string\";\r\nexport default async function getFumenFromReplay(replayUrl: string): Promise<any | null> {\r\n  const target = \"jstris.jezevec10.com\";\r\n  if (!replayUrl.includes(target)) {\r\n      throw new Error(\"Invalid replay URL. It must be from jstris.jezevec10.com.\");\r\n  }\r\n\r\n  const parts = replayUrl.split(\"/\");\r\n  if (parts.length < 5 || parts[3] !== \"replay\") {\r\n      throw new Error(\"Invalid replay URL format.\");\r\n  }\r\n\r\n  const id = parts[4];\r\n  const URL = `https://jstris.jezevec10.com/replay/data?id=${id}&type=0`;\r\n  const proxyUrl = `https://api.allorigins.win/get?url=${encodeURIComponent(URL)}`;\r\n\r\n  try {\r\n      const response = await fetch(proxyUrl);\r\n      if (!response.ok) throw new Error(\"Failed to fetch replay data.\");\r\n      const data = await response.json();\r\n      const replayData = JSON.parse(data.contents).d;\r\n\r\n      // Log raw replay data\r\n      console.log(\"Raw Replay Data:\", replayData);\r\n\r\n      const compressedData = compressToEncodedURIComponent(replayData);\r\n\r\n      // Log compressed data\r\n      console.log(\"Compressed Replay Data:\", compressedData);\r\n\r\n      // Send to TSTMan\r\n      const tstmanResponse = await fetch(`https://fumen.tstman.net/jstris`, {\r\n          method: \"POST\",\r\n          headers: {\r\n              Accept: \"application/json\",\r\n              \"Content-Type\": \"application/json\",\r\n          },\r\n          body: JSON.stringify({ replay: compressedData }),\r\n      });\r\n\r\n      if (!tstmanResponse.ok) {\r\n          const errorData = await tstmanResponse.text();\r\n          console.error(\"TSTMan API Error Response:\", errorData);\r\n          throw new Error(\"Failed to fetch Fumen data from TSTMan.\");\r\n      }\r\n\r\n      const tstmanData = await tstmanResponse.json();\r\n      console.log(\"Fumen Data:\", tstmanData);\r\n\r\n      return tstmanData.fumen;\r\n\r\n  } catch (error) {\r\n      console.error(\"Error in getFumenFromReplay:\", error);\r\n      throw error;\r\n  }\r\n}\r\n*/\r\n\r\nimport { decoder } from \"tetris-fumen\";\r\nimport { compressToEncodedURIComponent } from \"lz-string\";\r\n\r\nexport default async function parseReplay(txt: string) {\r\n    const target = \"jstris.jezevec10.com\";\r\n    if (txt.indexOf(target) < 0) return codeToFumen(txt);\r\n    const parts = txt.split(\"/\");\r\n    if (parts.length < 5) {\r\n        throw new Error(\"\");\r\n    }\r\n    if (parts[3] != \"replay\" || !parts[2].endsWith(target)) {\r\n        throw new Error(\"\");\r\n    }\r\n\r\n    let id = parts[4];\r\n    if (parts.length > 5) {\r\n        id = parts[5];\r\n    }\r\n\r\n    const url = `https://corsproxy.io/?${encodeURIComponent(`https://${parts[2]}/replay/data?id=${id}&type=0`)}`;\r\n    fetch(url).then((response) => {\r\n        if (!response.ok) {\r\n            throw new Error(\"\");\r\n        }\r\n        response.text().then((text) => {\r\n            const comp = compressToEncodedURIComponent(text);\r\n            console.log(comp);\r\n\r\n            return codeToFumen(comp);\r\n        });\r\n    });\r\n    //return null;\r\n}\r\n\r\nfunction codeToFumen(replayCode: string) {\r\n    fetch(`https://fumen.tstman.net/jstris`, {\r\n        method: \"POST\",\r\n        headers: {\r\n            Accept: \"application/json\",\r\n            \"Content-Type\": \"application/json\",\r\n        },\r\n        body: `replay=${replayCode}`,\r\n    }).then((response) => {\r\n        if (!response.ok) {\r\n            throw new Error(\"\");\r\n        } else {\r\n            response.json().then((data) => {\r\n                return data.fumen;\r\n                //return parseFumen(data.fumen);\r\n            });\r\n        }\r\n    });\r\n    //return null;\r\n}\r\n"],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAGA,SAASA,6BAA6B,QAAQ,WAAW;AAEzD,eAAe,eAAeC,WAAWA,CAACC,GAAW,EAAE;EACnD,MAAMC,MAAM,GAAG,sBAAsB;EACrC,IAAID,GAAG,CAACE,OAAO,CAACD,MAAM,CAAC,GAAG,CAAC,EAAE,OAAOE,WAAW,CAACH,GAAG,CAAC;EACpD,MAAMI,KAAK,GAAGJ,GAAG,CAACK,KAAK,CAAC,GAAG,CAAC;EAC5B,IAAID,KAAK,CAACE,MAAM,GAAG,CAAC,EAAE;IAClB,MAAM,IAAIC,KAAK,CAAC,EAAE,CAAC;EACvB;EACA,IAAIH,KAAK,CAAC,CAAC,CAAC,IAAI,QAAQ,IAAI,CAACA,KAAK,CAAC,CAAC,CAAC,CAACI,QAAQ,CAACP,MAAM,CAAC,EAAE;IACpD,MAAM,IAAIM,KAAK,CAAC,EAAE,CAAC;EACvB;EAEA,IAAIE,EAAE,GAAGL,KAAK,CAAC,CAAC,CAAC;EACjB,IAAIA,KAAK,CAACE,MAAM,GAAG,CAAC,EAAE;IAClBG,EAAE,GAAGL,KAAK,CAAC,CAAC,CAAC;EACjB;EAEA,MAAMM,GAAG,4BAAAC,MAAA,CAA4BC,kBAAkB,YAAAD,MAAA,CAAYP,KAAK,CAAC,CAAC,CAAC,sBAAAO,MAAA,CAAmBF,EAAE,YAAS,CAAC,CAAE;EAC5GI,KAAK,CAACH,GAAG,CAAC,CAACI,IAAI,CAAEC,QAAQ,IAAK;IAC1B,IAAI,CAACA,QAAQ,CAACC,EAAE,EAAE;MACd,MAAM,IAAIT,KAAK,CAAC,EAAE,CAAC;IACvB;IACAQ,QAAQ,CAACE,IAAI,CAAC,CAAC,CAACH,IAAI,CAAEG,IAAI,IAAK;MAC3B,MAAMC,IAAI,GAAGpB,6BAA6B,CAACmB,IAAI,CAAC;MAChDE,OAAO,CAACC,GAAG,CAACF,IAAI,CAAC;MAEjB,OAAOf,WAAW,CAACe,IAAI,CAAC;IAC5B,CAAC,CAAC;EACN,CAAC,CAAC;EACF;AACJ;AAEA,SAASf,WAAWA,CAACkB,UAAkB,EAAE;EACrCR,KAAK,oCAAoC;IACrCS,MAAM,EAAE,MAAM;IACdC,OAAO,EAAE;MACLC,MAAM,EAAE,kBAAkB;MAC1B,cAAc,EAAE;IACpB,CAAC;IACDC,IAAI,YAAAd,MAAA,CAAYU,UAAU;EAC9B,CAAC,CAAC,CAACP,IAAI,CAAEC,QAAQ,IAAK;IAClB,IAAI,CAACA,QAAQ,CAACC,EAAE,EAAE;MACd,MAAM,IAAIT,KAAK,CAAC,EAAE,CAAC;IACvB,CAAC,MAAM;MACHQ,QAAQ,CAACW,IAAI,CAAC,CAAC,CAACZ,IAAI,CAAEa,IAAI,IAAK;QAC3B,OAAOA,IAAI,CAACC,KAAK;QACjB;MACJ,CAAC,CAAC;IACN;EACJ,CAAC,CAAC;EACF;AACJ","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}