{"ast":null,"code":"function checkPieces(queue, pieces) {\n  // Parse the pieces string to get the sets and their counts\n  pieces = pieces.replaceAll(/[^\\[\\]^!TIJLOSZ0-7]/g, \"\");\n  pieces = pieces.replaceAll(\"*\", \"[TIJLOSZ]\");\n  for (let [_, set, count = 1] of Array.from(pieces.matchAll(/\\[(\\^?[TIJLOSZ]{0,7})\\](?:([!0-7]))?/g))) {\n    if (set.startsWith(\"^\")) set = \"TIJLOSZ\".split(\"\").filter(piece => !set.includes(piece)).join(\"\");\n    count = count === \"!\" ? set.length : Number(count);\n    console.log(set, count);\n\n    // Process the set and count as needed\n  }\n  return true; // or your actual logic\n}\n\n/*// Main method to check if a queue belongs to a set\r\n  export default function pieces(queue: string, set: string): boolean {\r\n    console.log(`Queue: ${queue}, Set: ${set}`);\r\n    var [pieces, modifiers] = set.split('{');\r\n    if(modifiers?.endsWith('}'))modifiers = modifiers.slice(0, modifiers.length - 1);\r\n    console.log(`Pieces: ${pieces}, Modifiers: ${modifiers}`);\r\n    \r\n    const queuePieces = pieces.trim();\r\n    return true;\r\n  }\r\n  \r\n  \r\n  \r\n  console.log(pieces(\"IJLS\", \"[IJLS]!{S<3}\"));\r\n  */\nexport default checkPieces;","map":{"version":3,"names":["checkPieces","queue","pieces","replaceAll","_","set","count","Array","from","matchAll","startsWith","split","filter","piece","includes","join","length","Number","console","log"],"sources":["C:/Stuff/Github/peasea/src/scripts/pieces.tsx"],"sourcesContent":["function checkPieces(queue: string, pieces: string): boolean {\r\n    // Parse the pieces string to get the sets and their counts\r\n    pieces = pieces.replaceAll(/[^\\[\\]^!TIJLOSZ0-7]/g, \"\");\r\n    pieces = pieces.replaceAll(\"*\", \"[TIJLOSZ]\");\r\n\r\n    for (let [_, set, count = 1] of Array.from(pieces.matchAll(/\\[(\\^?[TIJLOSZ]{0,7})\\](?:([!0-7]))?/g))) {\r\n        if (set.startsWith(\"^\")) set = \"TIJLOSZ\".split(\"\").filter(piece => !set.includes(piece)).join(\"\");\r\n\r\n        count = count === \"!\" ? set.length : Number(count);\r\n        console.log(set, count);\r\n        \r\n\r\n        // Process the set and count as needed\r\n    }\r\n\r\n    return true; // or your actual logic\r\n}\r\n\r\n/*// Main method to check if a queue belongs to a set\r\n  export default function pieces(queue: string, set: string): boolean {\r\n    console.log(`Queue: ${queue}, Set: ${set}`);\r\n    var [pieces, modifiers] = set.split('{');\r\n    if(modifiers?.endsWith('}'))modifiers = modifiers.slice(0, modifiers.length - 1);\r\n    console.log(`Pieces: ${pieces}, Modifiers: ${modifiers}`);\r\n    \r\n    const queuePieces = pieces.trim();\r\n    return true;\r\n  }\r\n  \r\n  \r\n  \r\n  console.log(pieces(\"IJLS\", \"[IJLS]!{S<3}\"));\r\n  */\r\nexport default checkPieces;\r\n"],"mappings":"AAAA,SAASA,WAAWA,CAACC,KAAa,EAAEC,MAAc,EAAW;EACzD;EACAA,MAAM,GAAGA,MAAM,CAACC,UAAU,CAAC,sBAAsB,EAAE,EAAE,CAAC;EACtDD,MAAM,GAAGA,MAAM,CAACC,UAAU,CAAC,GAAG,EAAE,WAAW,CAAC;EAE5C,KAAK,IAAI,CAACC,CAAC,EAAEC,GAAG,EAAEC,KAAK,GAAG,CAAC,CAAC,IAAIC,KAAK,CAACC,IAAI,CAACN,MAAM,CAACO,QAAQ,CAAC,uCAAuC,CAAC,CAAC,EAAE;IAClG,IAAIJ,GAAG,CAACK,UAAU,CAAC,GAAG,CAAC,EAAEL,GAAG,GAAG,SAAS,CAACM,KAAK,CAAC,EAAE,CAAC,CAACC,MAAM,CAACC,KAAK,IAAI,CAACR,GAAG,CAACS,QAAQ,CAACD,KAAK,CAAC,CAAC,CAACE,IAAI,CAAC,EAAE,CAAC;IAEjGT,KAAK,GAAGA,KAAK,KAAK,GAAG,GAAGD,GAAG,CAACW,MAAM,GAAGC,MAAM,CAACX,KAAK,CAAC;IAClDY,OAAO,CAACC,GAAG,CAACd,GAAG,EAAEC,KAAK,CAAC;;IAGvB;EACJ;EAEA,OAAO,IAAI,CAAC,CAAC;AACjB;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAeN,WAAW","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}