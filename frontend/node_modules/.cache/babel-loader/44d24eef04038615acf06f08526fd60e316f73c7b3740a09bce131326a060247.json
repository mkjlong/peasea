{"ast":null,"code":"class Set {\n  constructor(name, methods) {\n    let author = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : \"unknown\";\n    let description = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : \"\";\n    let profilePic = arguments.length > 4 && arguments[4] !== undefined ? arguments[4] : \"\";\n    this.name = void 0;\n    this.description = void 0;\n    this.author = void 0;\n    this.profilePic = void 0;\n    // Added profilePic property\n    this.createdAt = void 0;\n    this.methods = void 0;\n    this.tags = void 0;\n    this.isPublished = void 0;\n    this.isUserOwned = void 0;\n    this.name = name;\n    this.methods = methods;\n    this.author = author;\n    this.description = description;\n    this.profilePic = profilePic; // Initialize profilePic\n    this.createdAt = new Date();\n    this.tags = [];\n    this.isPublished = false;\n    this.isUserOwned = false;\n  }\n\n  // ---- Basic Info ----\n  setName(name) {\n    this.name = name;\n  }\n  getName() {\n    return this.name;\n  }\n  setDescription(desc) {\n    this.description = desc;\n  }\n  getDescription() {\n    return this.description;\n  }\n  getAuthor() {\n    return this.author;\n  }\n  getCreatedAt() {\n    return this.createdAt;\n  }\n  getProfilePic() {\n    return this.profilePic;\n  } // Getter for profilePic\n\n  // ---- Tags & Flags ----\n  setTags(tags) {\n    this.tags = tags;\n  }\n  getTags() {\n    return this.tags;\n  }\n  publish() {\n    this.isPublished = true;\n  }\n  unpublish() {\n    this.isPublished = false;\n  }\n  isSetPublished() {\n    return this.isPublished;\n  }\n  setUserOwned(flag) {\n    this.isUserOwned = flag;\n  }\n  isOwnedByUser() {\n    return this.isUserOwned;\n  }\n\n  // ---- Method Management ----\n  addMethod(method) {\n    this.methods.push(method);\n  }\n  removeMethodByName(methodName) {\n    this.methods = this.methods.filter(m => m.getName() !== methodName);\n  }\n  replaceMethod(oldMethodName, newMethod) {\n    const index = this.methods.findIndex(m => m.getName() === oldMethodName);\n    if (index !== -1) {\n      this.methods[index] = newMethod;\n    }\n  }\n  getMethods() {\n    return this.methods;\n  }\n  getMethodsByName(name) {\n    return this.methods.filter(method => method.getName().toLowerCase().startsWith(name.toLowerCase()));\n  }\n\n  // ---- Progress + Stats ----\n  getTotalCover() {\n    return this.methods.reduce((sum, method) => sum + method.getTotalCover(), 0);\n  }\n  getAverageCover() {\n    if (this.methods.length === 0) return 0;\n    return this.getTotalCover() / this.methods.length;\n  }\n  getMethodCount() {\n    return this.methods.length;\n  }\n  getCompletionRatio() {\n    const completed = this.methods.filter(m => m.getTotalCover() >= 1.0);\n    return completed.length / this.methods.length;\n  }\n}\nexport default Set;","map":{"version":3,"names":["Set","constructor","name","methods","author","arguments","length","undefined","description","profilePic","createdAt","tags","isPublished","isUserOwned","Date","setName","getName","setDescription","desc","getDescription","getAuthor","getCreatedAt","getProfilePic","setTags","getTags","publish","unpublish","isSetPublished","setUserOwned","flag","isOwnedByUser","addMethod","method","push","removeMethodByName","methodName","filter","m","replaceMethod","oldMethodName","newMethod","index","findIndex","getMethods","getMethodsByName","toLowerCase","startsWith","getTotalCover","reduce","sum","getAverageCover","getMethodCount","getCompletionRatio","completed"],"sources":["C:/Stuff/Github/peasea/frontend/src/scripts/Set.ts"],"sourcesContent":["import Method from \"./Method\";\r\n\r\nclass Set {\r\n    private name: string;\r\n    private description: string;\r\n    private author: string;\r\n    private profilePic: string; // Added profilePic property\r\n    private createdAt: Date;\r\n\r\n    private methods: Method[];\r\n    private tags: string[];\r\n    private isPublished: boolean;\r\n    private isUserOwned: boolean;\r\n\r\n    constructor(name: string, methods: Method[], author = \"unknown\", description = \"\", profilePic = \"\") {\r\n        this.name = name;\r\n        this.methods = methods;\r\n        this.author = author;\r\n        this.description = description;\r\n        this.profilePic = profilePic; // Initialize profilePic\r\n        this.createdAt = new Date();\r\n        this.tags = [];\r\n        this.isPublished = false;\r\n        this.isUserOwned = false;\r\n    }\r\n\r\n    // ---- Basic Info ----\r\n    setName(name: string) { this.name = name; }\r\n    getName() { return this.name; }\r\n\r\n    setDescription(desc: string) { this.description = desc; }\r\n    getDescription() { return this.description; }\r\n\r\n    getAuthor() { return this.author; }\r\n    getCreatedAt() { return this.createdAt; }\r\n\r\n    getProfilePic() { return this.profilePic; } // Getter for profilePic\r\n\r\n    // ---- Tags & Flags ----\r\n    setTags(tags: string[]) { this.tags = tags; }\r\n    getTags() { return this.tags; }\r\n\r\n    publish() { this.isPublished = true; }\r\n    unpublish() { this.isPublished = false; }\r\n    isSetPublished() { return this.isPublished; }\r\n\r\n    setUserOwned(flag: boolean) { this.isUserOwned = flag; }\r\n    isOwnedByUser() { return this.isUserOwned; }\r\n\r\n    // ---- Method Management ----\r\n    addMethod(method: Method) { this.methods.push(method); }\r\n\r\n    removeMethodByName(methodName: string) {\r\n        this.methods = this.methods.filter(m => m.getName() !== methodName);\r\n    }\r\n\r\n    replaceMethod(oldMethodName: string, newMethod: Method) {\r\n        const index = this.methods.findIndex(m => m.getName() === oldMethodName);\r\n        if (index !== -1) {\r\n            this.methods[index] = newMethod;\r\n        }\r\n    }\r\n\r\n    getMethods(): Method[] { return this.methods; }\r\n\r\n    getMethodsByName(name: string): Method[] {\r\n        return this.methods.filter(method => method.getName().toLowerCase().startsWith(name.toLowerCase()));\r\n    }\r\n\r\n    // ---- Progress + Stats ----\r\n    getTotalCover(): number {\r\n        return this.methods.reduce((sum, method) => sum + method.getTotalCover(), 0);\r\n    }\r\n\r\n    getAverageCover(): number {\r\n        if (this.methods.length === 0) return 0;\r\n        return this.getTotalCover() / this.methods.length;\r\n    }\r\n\r\n    getMethodCount(): number {\r\n        return this.methods.length;\r\n    }\r\n\r\n    getCompletionRatio(): number {\r\n        const completed = this.methods.filter(m => m.getTotalCover() >= 1.0);\r\n        return completed.length / this.methods.length;\r\n    }\r\n}\r\n\r\nexport default Set;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}