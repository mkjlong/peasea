{"ast":null,"code":"import { compressToEncodedURIComponent } from \"lz-string\";\nexport default async function getFumenFromReplay(replayUrl) {\n  // Check if the URL is a valid Jstris replay URL\n  const target = \"jstris.jezevec10.com\";\n  if (!replayUrl.includes(target)) {\n    throw new Error(\"Invalid replay URL. It must be from jstris.jezevec10.com.\");\n  }\n  const parts = replayUrl.split(\"/\");\n  if (parts.length < 5 || parts[3] !== \"replay\") {\n    throw new Error(\"Invalid replay URL format.\");\n  }\n\n  // Extract replay ID\n  const id = parts[4];\n\n  // Fetch replay data using CORS proxy\n  const URL = \"https://jstris.jezevec10.com/replay/data?id=\".concat(id, \"&type=0\");\n  const proxyUrl = \"https://api.allorigins.win/get?url=\".concat(encodeURIComponent(URL));\n  const response = await fetch(proxyUrl);\n  if (!response.ok) throw new Error(\"Network response was not ok.\");\n  const data = await response.json();\n  const replayData = JSON.parse(data.contents).d;\n\n  // Compress the replay data to a URL-safe format\n  const compressedData = compressToEncodedURIComponent(replayData);\n\n  // Send the compressed replay data to the TSTMan API\n  const tstmanResponse = await fetch(\"https://fumen.tstman.net/jstris\", {\n    method: \"POST\",\n    headers: {\n      Accept: \"application/json\",\n      \"Content-Type\": \"application/json\"\n    },\n    body: JSON.stringify({\n      replay: compressedData\n    })\n  });\n  if (!tstmanResponse.ok) {\n    throw new Error(\"Failed to fetch Fumen data from TSTMan.\");\n  }\n  const tstmanData = await tstmanResponse.json();\n\n  // Return the Fumen URL\n  return tstmanData.fumen;\n}","map":{"version":3,"names":["compressToEncodedURIComponent","getFumenFromReplay","replayUrl","target","includes","Error","parts","split","length","id","URL","concat","proxyUrl","encodeURIComponent","response","fetch","ok","data","json","replayData","JSON","parse","contents","d","compressedData","tstmanResponse","method","headers","Accept","body","stringify","replay","tstmanData","fumen"],"sources":["C:/Stuff/Github/peasea/src/scripts/upload.tsx"],"sourcesContent":["import { compressToEncodedURIComponent } from \"lz-string\";\r\n\r\nexport default async function getFumenFromReplay(replayUrl: string): Promise<any | null> {\r\n    // Check if the URL is a valid Jstris replay URL\r\n    const target = \"jstris.jezevec10.com\";\r\n    if (!replayUrl.includes(target)) {\r\n        throw new Error(\r\n            \"Invalid replay URL. It must be from jstris.jezevec10.com.\"\r\n        );\r\n    }\r\n    const parts = replayUrl.split(\"/\");\r\n    if (parts.length < 5 || parts[3] !== \"replay\") {\r\n        throw new Error(\"Invalid replay URL format.\");\r\n    }\r\n\r\n    // Extract replay ID\r\n    const id = parts[4];\r\n\r\n    // Fetch replay data using CORS proxy\r\n    const URL = `https://jstris.jezevec10.com/replay/data?id=${id}&type=0`;\r\n    const proxyUrl = `https://api.allorigins.win/get?url=${encodeURIComponent(URL)}`;\r\n\r\n    const response = await fetch(proxyUrl);\r\n    if (!response.ok) throw new Error(\"Network response was not ok.\");\r\n    const data = await response.json();\r\n    const replayData = JSON.parse(data.contents).d;\r\n\r\n    // Compress the replay data to a URL-safe format\r\n    const compressedData = compressToEncodedURIComponent(replayData);\r\n\r\n    // Send the compressed replay data to the TSTMan API\r\n    const tstmanResponse = await fetch(`https://fumen.tstman.net/jstris`, {\r\n        method: \"POST\",\r\n        headers: {\r\n            Accept: \"application/json\",\r\n            \"Content-Type\": \"application/json\",\r\n        },\r\n        body: JSON.stringify({ replay: compressedData }),\r\n    });\r\n\r\n    if (!tstmanResponse.ok) {\r\n        throw new Error(\"Failed to fetch Fumen data from TSTMan.\");\r\n    }\r\n\r\n    const tstmanData = await tstmanResponse.json();\r\n\r\n    // Return the Fumen URL\r\n    return tstmanData.fumen;\r\n}\r\n"],"mappings":"AAAA,SAASA,6BAA6B,QAAQ,WAAW;AAEzD,eAAe,eAAeC,kBAAkBA,CAACC,SAAiB,EAAuB;EACrF;EACA,MAAMC,MAAM,GAAG,sBAAsB;EACrC,IAAI,CAACD,SAAS,CAACE,QAAQ,CAACD,MAAM,CAAC,EAAE;IAC7B,MAAM,IAAIE,KAAK,CACX,2DACJ,CAAC;EACL;EACA,MAAMC,KAAK,GAAGJ,SAAS,CAACK,KAAK,CAAC,GAAG,CAAC;EAClC,IAAID,KAAK,CAACE,MAAM,GAAG,CAAC,IAAIF,KAAK,CAAC,CAAC,CAAC,KAAK,QAAQ,EAAE;IAC3C,MAAM,IAAID,KAAK,CAAC,4BAA4B,CAAC;EACjD;;EAEA;EACA,MAAMI,EAAE,GAAGH,KAAK,CAAC,CAAC,CAAC;;EAEnB;EACA,MAAMI,GAAG,kDAAAC,MAAA,CAAkDF,EAAE,YAAS;EACtE,MAAMG,QAAQ,yCAAAD,MAAA,CAAyCE,kBAAkB,CAACH,GAAG,CAAC,CAAE;EAEhF,MAAMI,QAAQ,GAAG,MAAMC,KAAK,CAACH,QAAQ,CAAC;EACtC,IAAI,CAACE,QAAQ,CAACE,EAAE,EAAE,MAAM,IAAIX,KAAK,CAAC,8BAA8B,CAAC;EACjE,MAAMY,IAAI,GAAG,MAAMH,QAAQ,CAACI,IAAI,CAAC,CAAC;EAClC,MAAMC,UAAU,GAAGC,IAAI,CAACC,KAAK,CAACJ,IAAI,CAACK,QAAQ,CAAC,CAACC,CAAC;;EAE9C;EACA,MAAMC,cAAc,GAAGxB,6BAA6B,CAACmB,UAAU,CAAC;;EAEhE;EACA,MAAMM,cAAc,GAAG,MAAMV,KAAK,oCAAoC;IAClEW,MAAM,EAAE,MAAM;IACdC,OAAO,EAAE;MACLC,MAAM,EAAE,kBAAkB;MAC1B,cAAc,EAAE;IACpB,CAAC;IACDC,IAAI,EAAET,IAAI,CAACU,SAAS,CAAC;MAAEC,MAAM,EAAEP;IAAe,CAAC;EACnD,CAAC,CAAC;EAEF,IAAI,CAACC,cAAc,CAACT,EAAE,EAAE;IACpB,MAAM,IAAIX,KAAK,CAAC,yCAAyC,CAAC;EAC9D;EAEA,MAAM2B,UAAU,GAAG,MAAMP,cAAc,CAACP,IAAI,CAAC,CAAC;;EAE9C;EACA,OAAOc,UAAU,CAACC,KAAK;AAC3B","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}