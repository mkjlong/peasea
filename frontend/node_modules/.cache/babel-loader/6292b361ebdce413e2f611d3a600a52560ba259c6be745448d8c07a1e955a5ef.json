{"ast":null,"code":"import { PC } from \"./PC\";\nimport { normalizedSort } from \"./pieces\";\nimport { tetrimino, tetriminos } from \"./Tetrimino\";\nexport class PCGroup {\n  constructor(arg) {\n    this.bag = void 0;\n    this.duplicate = void 0;\n    this.code = void 0;\n    if (typeof arg === \"number\") {\n      if (!Number.isInteger(arg)) {\n        throw new RangeError(\"PCGroup code must be an integer\");\n      }\n      this.code = arg;\n      // abc = duplicate (bits 9-7), defghij = group (bits 6-0)\n      let dupeBits = arg >> 7 & 0b111;\n      let bagBits = arg & 0b1111111;\n      // Special case: both 0000000000 and 1111111000 are \"first PC\"\n      if (arg === 0 || arg === 0b1111111000) {\n        this.bag = new Set();\n        this.duplicate = undefined;\n        return;\n      }\n      // Invalid: all 1s with nonzero dupe\n      if (bagBits === 0b1111111 && dupeBits !== 0) bagBits = 0b0000000;\n      // Build group as Set<Tetrimino>\n      let group = new Set();\n      for (let i = 0; i < 7; ++i) {\n        if (bagBits & 1 << 6 - i) {\n          group.add(tetrimino(i));\n        }\n      }\n      this.bag = group;\n      if (dupeBits > 0) {\n        this.duplicate = tetrimino(dupeBits);\n      }\n    } else if (typeof arg === \"string\") {\n      this.bag = new Set();\n      this.duplicate = undefined;\n      this.code = 0;\n    } else {\n      throw new Error(\"Invalid constructor arguments\");\n    }\n  }\n  static encodeQueue(str) {\n    let dupe = undefined;\n    let bag = new Set();\n    //get rid of all invalid PCGroup string formats\n    str = str.toUpperCase().replace(/[^JTSLIZO<>\\-\\+]/g, \"\").replace(\"-\", \">\").replace(\"+\", \"<\");\n    if (str.includes(\">\")) {\n      //Format: X>YZ , X is the duplicate piece, YZ is the INVERTED bag.\n      if (str.includes(\"<\")) throw new Error(\"Invalid PCGroup string format\");\n      let [dupeString, bagString] = str.split(\">\");\n      if (dupeString.length > 1 || bagString.length > 7) throw new Error(\"Invalid PCGroup string format\");\n      if (bagString.length === 0) bagString = \"\";\n      dupe = tetrimino(dupeString);\n      bag = new Set(tetriminos).difference(new Set(bagString.split(\"\").map(tetrimino)));\n      if (bag.size !== 7 - bagString.length) throw new Error(\"Invalid PCGroup string format\");\n    } else if (str.includes(\"<\")) {\n      if (str.includes(\">\")) throw new Error(\"Invalid PCGroup string format\");\n      //Format: X<YZ , X is the duplicate piece, YZ is the bag.\n      let [dupeString, bagString] = str.split(\"<\");\n      if (dupeString.length > 1 || bagString.length > 7) throw new Error(\"Invalid PCGroup string format\");\n      if (bagString.length === 0) bagString = \"JTSLIZO\";\n      dupe = tetrimino(dupeString);\n      bag = new Set(bagString.split(\"\").map(tetrimino));\n      if (bag.size !== bagString.length) throw new Error(\"Invalid PCGroup string format\");\n    }\n    return -1;\n  }\n\n  /**\r\n   * Static: Mirror a PCGroup code and return a new PCGroup.\r\n   */\n  static mirror(code) {\n    // Swap a (bit 9) and d (bit 6)\n    let a = code >> 9 & 1;\n    let d = code >> 6 & 1;\n    code = code & ~(1 << 9) | d << 9;\n    code = code & ~(1 << 6) | a << 6;\n\n    // Swap c (bit 7) and f (bit 4)\n    let c = code >> 7 & 1;\n    let f = code >> 4 & 1;\n    code = code & ~(1 << 7) | f << 7;\n    code = code & ~(1 << 4) | c << 4;\n\n    // Swap h (bit 2) and j (bit 0)\n    let h = code >> 2 & 1;\n    let j = code >> 0 & 1;\n    code = code & ~(1 << 2) | j << 2;\n    code = code & ~(1 << 0) | h << 0;\n    return new PCGroup(code);\n  }\n\n  /**\r\n   * Instance: Mirror this PCGroup in-place and return this.\r\n   */\n  mirror() {\n    let code = this.code;\n\n    // Swap a (bit 9) and d (bit 6)\n    let a = code >> 9 & 1;\n    let d = code >> 6 & 1;\n    code = code & ~(1 << 9) | d << 9;\n    code = code & ~(1 << 6) | a << 6;\n\n    // Swap c (bit 7) and f (bit 4)\n    let c = code >> 7 & 1;\n    let f = code >> 4 & 1;\n    code = code & ~(1 << 7) | f << 7;\n    code = code & ~(1 << 4) | c << 4;\n\n    // Swap h (bit 2) and j (bit 0)\n    let h = code >> 2 & 1;\n    let j = code >> 0 & 1;\n    code = code & ~(1 << 2) | j << 2;\n    code = code & ~(1 << 0) | h << 0;\n\n    // Reinitialize this PCGroup with the mirrored code\n    const mirrored = new PCGroup(code);\n    this.code = mirrored.code;\n    this.bag = mirrored.bag;\n    this.duplicate = mirrored.duplicate;\n    return this;\n  }\n  toString() {\n    // Collect all piece letters from group and duplicate\n    const piecesArr = Array.from(this.bag, t => t.toString());\n    if (this.duplicate) {\n      piecesArr.push(this.duplicate.toString());\n    }\n    return normalizedSort(piecesArr.join(\"\"));\n  }\n  getPC() {\n    const queueLength = this.bag.size + (this.duplicate ? 1 : 0);\n    switch (queueLength) {\n      case 0:\n        return PC.FIRST;\n      case 1:\n        return PC.THIRD;\n      case 2:\n        return PC.FIFTH;\n      case 3:\n        return PC.SEVENTH;\n      case 4:\n        return PC.SECOND;\n      case 5:\n        return PC.FOURTH;\n      case 6:\n        return PC.SIXTH;\n      case 7:\n        return PC.FIRST;\n      default:\n        throw new Error(\"Invalid PCGroup\");\n    }\n  }\n}","map":{"version":3,"names":["PC","normalizedSort","tetrimino","tetriminos","PCGroup","constructor","arg","bag","duplicate","code","Number","isInteger","RangeError","dupeBits","bagBits","Set","undefined","group","i","add","Error","encodeQueue","str","dupe","toUpperCase","replace","includes","dupeString","bagString","split","length","difference","map","size","mirror","a","d","c","f","h","j","mirrored","toString","piecesArr","Array","from","t","push","join","getPC","queueLength","FIRST","THIRD","FIFTH","SEVENTH","SECOND","FOURTH","SIXTH"],"sources":["C:/Stuff/Github/peasea/frontend/src/scripts/PCGroup.ts"],"sourcesContent":["import { PC } from \"./PC\";\r\nimport { normalizedSort, pieces } from \"./pieces\";\r\nimport Tetrimino, { tetrimino, tetriminos } from \"./Tetrimino\";\r\n\r\nexport class PCGroup {\r\n    bag: Set<Tetrimino>;\r\n    duplicate?: Tetrimino;\r\n    code: number;\r\n\r\n    constructor(arg: number | string) {\r\n        if (typeof arg === \"number\") {\r\n            if (!Number.isInteger(arg)) {\r\n                throw new RangeError(\"PCGroup code must be an integer\");\r\n            }\r\n            this.code = arg;\r\n            // abc = duplicate (bits 9-7), defghij = group (bits 6-0)\r\n            let dupeBits = (arg >> 7) & 0b111;\r\n            let bagBits = arg & 0b1111111;\r\n            // Special case: both 0000000000 and 1111111000 are \"first PC\"\r\n            if (arg === 0 || arg === 0b1111111000) {\r\n                this.bag = new Set();\r\n                this.duplicate = undefined;\r\n                return;\r\n            }\r\n            // Invalid: all 1s with nonzero dupe\r\n            if (bagBits === 0b1111111 && dupeBits !== 0)bagBits = 0b0000000;\r\n            // Build group as Set<Tetrimino>\r\n            let group = new Set<Tetrimino>();\r\n            for (let i = 0; i < 7; ++i) {\r\n                if (bagBits & (1 << (6 - i))) {\r\n                    group.add(tetrimino(i));\r\n                }\r\n            }\r\n            this.bag = group;\r\n            if (dupeBits > 0) {\r\n                this.duplicate = tetrimino(dupeBits);\r\n            }\r\n        } else if (typeof arg === \"string\") {\r\n            this.bag = new Set<Tetrimino>();\r\n            this.duplicate = undefined;\r\n            this.code = 0;\r\n\r\n\r\n\r\n\r\n        } else {\r\n            throw new Error(\"Invalid constructor arguments\");\r\n        }\r\n    }\r\n\r\n    public static encodeQueue(str: string): number {\r\n        let dupe = undefined;\r\n        let bag = new Set<Tetrimino>();\r\n        //get rid of all invalid PCGroup string formats\r\n        str = str.toUpperCase().replace(/[^JTSLIZO<>\\-\\+]/g,\"\").replace(\"-\",\">\").replace(\"+\",\"<\");\r\n\r\n        if(str.includes(\">\")){\r\n            //Format: X>YZ , X is the duplicate piece, YZ is the INVERTED bag.\r\n            if(str.includes(\"<\")) throw new Error(\"Invalid PCGroup string format\");\r\n            let [dupeString, bagString] = str.split(\">\");\r\n            if (dupeString.length > 1 || bagString.length > 7) throw new Error(\"Invalid PCGroup string format\");\r\n            if (bagString.length === 0) bagString = \"\";\r\n            dupe = tetrimino(dupeString);\r\n            bag = new Set(tetriminos).difference(new Set<Tetrimino>(bagString.split(\"\").map(tetrimino)));\r\n            if (bag.size !== 7 - bagString.length) throw new Error(\"Invalid PCGroup string format\");\r\n        } else if(str.includes(\"<\")){\r\n            if(str.includes(\">\")) throw new Error(\"Invalid PCGroup string format\");\r\n            //Format: X<YZ , X is the duplicate piece, YZ is the bag.\r\n            let [dupeString,bagString] = str.split(\"<\");\r\n            if(dupeString.length > 1 || bagString.length > 7) throw new Error(\"Invalid PCGroup string format\");\r\n            if(bagString.length === 0) bagString = \"JTSLIZO\";\r\n            dupe = tetrimino(dupeString);\r\n            bag = new Set<Tetrimino>(bagString.split(\"\").map(tetrimino));\r\n            if(bag.size !== bagString.length) throw new Error(\"Invalid PCGroup string format\");\r\n        }\r\n\r\n\r\n\r\n        \r\n\r\n        \r\n        return -1;\r\n    }\r\n\r\n    /**\r\n     * Static: Mirror a PCGroup code and return a new PCGroup.\r\n     */\r\n    static mirror(code: number): PCGroup {\r\n        // Swap a (bit 9) and d (bit 6)\r\n        let a = (code >> 9) & 1;\r\n        let d = (code >> 6) & 1;\r\n        code = (code & ~(1 << 9)) | (d << 9);\r\n        code = (code & ~(1 << 6)) | (a << 6);\r\n\r\n        // Swap c (bit 7) and f (bit 4)\r\n        let c = (code >> 7) & 1;\r\n        let f = (code >> 4) & 1;\r\n        code = (code & ~(1 << 7)) | (f << 7);\r\n        code = (code & ~(1 << 4)) | (c << 4);\r\n\r\n        // Swap h (bit 2) and j (bit 0)\r\n        let h = (code >> 2) & 1;\r\n        let j = (code >> 0) & 1;\r\n        code = (code & ~(1 << 2)) | (j << 2);\r\n        code = (code & ~(1 << 0)) | (h << 0);\r\n\r\n        return new PCGroup(code);\r\n    }\r\n\r\n    /**\r\n     * Instance: Mirror this PCGroup in-place and return this.\r\n     */\r\n    mirror(): this {\r\n        let code = this.code;\r\n\r\n        // Swap a (bit 9) and d (bit 6)\r\n        let a = (code >> 9) & 1;\r\n        let d = (code >> 6) & 1;\r\n        code = (code & ~(1 << 9)) | (d << 9);\r\n        code = (code & ~(1 << 6)) | (a << 6);\r\n\r\n        // Swap c (bit 7) and f (bit 4)\r\n        let c = (code >> 7) & 1;\r\n        let f = (code >> 4) & 1;\r\n        code = (code & ~(1 << 7)) | (f << 7);\r\n        code = (code & ~(1 << 4)) | (c << 4);\r\n\r\n        // Swap h (bit 2) and j (bit 0)\r\n        let h = (code >> 2) & 1;\r\n        let j = (code >> 0) & 1;\r\n        code = (code & ~(1 << 2)) | (j << 2);\r\n        code = (code & ~(1 << 0)) | (h << 0);\r\n\r\n        // Reinitialize this PCGroup with the mirrored code\r\n        const mirrored = new PCGroup(code);\r\n        this.code = mirrored.code;\r\n        this.bag = mirrored.bag;\r\n        this.duplicate = mirrored.duplicate;\r\n        return this;\r\n    }\r\n\r\n    public toString(): string {\r\n        // Collect all piece letters from group and duplicate\r\n        const piecesArr = Array.from(this.bag, t => t.toString());\r\n        if (this.duplicate) {\r\n            piecesArr.push(this.duplicate.toString());\r\n        }\r\n        return normalizedSort(piecesArr.join(\"\"));\r\n    }\r\n\r\n    public getPC(): PC {\r\n        const queueLength = this.bag.size + (this.duplicate ? 1 : 0);\r\n        switch (queueLength) {\r\n            case 0: return PC.FIRST;\r\n            case 1: return PC.THIRD;\r\n            case 2: return PC.FIFTH;\r\n            case 3: return PC.SEVENTH;\r\n            case 4: return PC.SECOND;\r\n            case 5: return PC.FOURTH;\r\n            case 6: return PC.SIXTH;\r\n            case 7: return PC.FIRST;\r\n            default: throw new Error(\"Invalid PCGroup\");\r\n        }\r\n    }\r\n}\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}