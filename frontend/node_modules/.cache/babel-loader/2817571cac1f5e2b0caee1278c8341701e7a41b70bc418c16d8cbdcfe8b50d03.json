{"ast":null,"code":"var _Setup;\nimport { PCGroup } from \"./PCGroup\";\nimport { pieces } from \"./pieces\";\nclass Setup {\n  constructor(_ref) {\n    let {\n      name = \"Unnamed Setup\",\n      setupFumen = \"v115@vhAAgH\",\n      solutionFumen = \"v115@vhAAgH\",\n      success,\n      fails,\n      PCGroup\n    } = _ref;\n    this.name = void 0;\n    this.setupFumen = void 0;\n    this.solutionFumen = void 0;\n    this.success = void 0;\n    this.fails = void 0;\n    this.PCGroup = void 0;\n    this.name = name;\n    this.setupFumen = setupFumen;\n    this.solutionFumen = solutionFumen;\n    this.success = success ? this.preprocessQueues(success) : undefined;\n    this.fails = fails ? this.preprocessQueues(fails) : undefined;\n    this.PCGroup = PCGroup;\n  }\n\n  // Preprocess queues using the `pieces` function\n  preprocessQueues(queues) {\n    const result = new Set();\n    for (const queue of queues) {\n      for (const expanded of pieces(queue)) {\n        result.add(expanded);\n      }\n    }\n    return result;\n  }\n\n  // Static method to calculate coverage for a PCGroup\n  static calculateCoverage(pcGroup) {\n    const permutations = Array.from(pieces(\"[\".concat(pcGroup.getQueue(), \"]!p3\"))); // Generate all permutations for the PCGroup\n    const uniquePermutations = new Set(permutations); // Ensure uniqueness\n    let matchingCount = 0;\n    for (const permutation of uniquePermutations) {\n      for (const setup of Setup.testSetups) {\n        var _setup$getSuccess;\n        if ((_setup$getSuccess = setup.getSuccess()) !== null && _setup$getSuccess !== void 0 && _setup$getSuccess.has(permutation)) {\n          matchingCount++;\n          break; // Stop checking other setups for this permutation\n        }\n      }\n    }\n    return matchingCount / uniquePermutations.size * 100; // Return progress as a percentage\n  }\n\n  // Getters\n  getName() {\n    return this.name;\n  }\n  getSetup() {\n    return this.setupFumen;\n  }\n  getSolution() {\n    return this.solutionFumen;\n  }\n  getFails() {\n    return this.fails;\n  }\n  getSuccess() {\n    return this.success;\n  }\n  getPCGroup() {\n    return this.PCGroup;\n  }\n}\n_Setup = Setup;\nSetup.testSetups = [new _Setup({\n  name: \"See Z\",\n  setupFumen: \"v115@HhglIeglCeR4Aei0hlAeR4zhg0JeAgWHAT4UTAS4CC?A\",\n  solutionFumen: \"v115@9ghlwhh0R4AtRpA8glwhg0R4BtRpA8glwhg0B8AtE8?whG8JeAgH\",\n  PCGroup: PCGroup.from(\"IJLS\"),\n  success: [\"ZST\", \"ZTS\", \"SZT\", \"STZ\", \"TSZ\", \"TZS\"],\n  // Example test queues\n  fails: [\"[ST]!Z\"]\n}), new _Setup({\n  name: \"See SZ\",\n  setupFumen: \"v115@LhhlDeg0zhglBeR4i0BeglAeR4KeAgH\",\n  solutionFumen: \"v115@9gRpzhh0hlRpBtB8g0R4glF8R4E8BtA8g0B8glJeAg?H\",\n  PCGroup: PCGroup.from(\"IJLS\"),\n  success: [\"SZT\", \"STZ\", \"ZST\", \"ZTS\", \"TSZ\", \"TZS\"] // Example test queues\n}), new _Setup({\n  name: \"Cradle\",\n  setupFumen: \"v115@DhBthlGeBtglGeBtglDezhBtJeAgH\",\n  solutionFumen: \"v115@DhD8GeC8GeC8DeF8JeAgH\",\n  PCGroup: PCGroup.from(\"Z\"),\n  success: [\"Z\"] // Example test queue\n}), new _Setup({\n  name: \"use SZ\",\n  setupFumen: \"v115@IgAAgH\",\n  solutionFumen: \"v115@MgAAgH\",\n  PCGroup: PCGroup.from(\"LO\"),\n  success: [\"LO\", \"OL\"] // Example test queues\n}), new _Setup({\n  name: \"PCO\",\n  setupFumen: \"v115@9gilEeR4glRpDeR4wwg0RpCeBtxwi0DeBtwwJeAgH\",\n  solutionFumen: \"v115@vhAAgH\",\n  PCGroup: PCGroup.from(\"TIJLOSZ\"),\n  success: [\"TIJLOSZ\"] // Example test queue\n}), new _Setup({\n  name: \"AntiPCO\",\n  setupFumen: \"v115@WgAAgH\",\n  solutionFumen: \"v115@XgAAgH\",\n  PCGroup: PCGroup.from(\"TIJLSZ\"),\n  success: [\"TIJLSZ\"] // Example test queue\n}), new _Setup({\n  name: \"Zed Setup\",\n  setupFumen: \"v115@UgAAgH\",\n  solutionFumen: \"v115@VgAAgH\",\n  PCGroup: PCGroup.from(\"Z\"),\n  success: [\"Z\"] // Example test queue\n}), new _Setup({\n  name: \"Corner Cover\",\n  setupFumen: \"v115@PgAAgH\",\n  solutionFumen: \"v115@QgAAgH\",\n  PCGroup: PCGroup.from(\"IJLSTZ\"),\n  success: [\"IJLSTZ\"] // Example test queue\n}), new _Setup({\n  name: \"3p\",\n  setupFumen: \"v115@OgAAgH\",\n  solutionFumen: \"v115@NgAAgH\",\n  PCGroup: PCGroup.from(\"ILS\"),\n  success: [\"ILS\", \"ISL\", \"LIS\", \"LSI\", \"SIL\", \"SLI\"] // Example test queues\n}), new _Setup({\n  name: \"\",\n  setupFumen: \"v115@YgAAgH\",\n  solutionFumen: \"v115@ZgAAgH\",\n  PCGroup: PCGroup.from(\"LTJS\"),\n  success: [\"LTJS\"] // Example test queue\n})];\nexport default Setup;","map":{"version":3,"names":["PCGroup","pieces","Setup","constructor","_ref","name","setupFumen","solutionFumen","success","fails","preprocessQueues","undefined","queues","result","Set","queue","expanded","add","calculateCoverage","pcGroup","permutations","Array","from","concat","getQueue","uniquePermutations","matchingCount","permutation","setup","testSetups","_setup$getSuccess","getSuccess","has","size","getName","getSetup","getSolution","getFails","getPCGroup","_Setup"],"sources":["C:/Stuff/Github/peasea/frontend/src/scripts/Setup.ts"],"sourcesContent":["import { PC } from \"./PC\";\r\nimport { PCGroup } from \"./PCGroup\";\r\nimport { pieces } from \"./pieces\";\r\n\r\nclass Setup {\r\n    public static testSetups = [\r\n        new Setup({\r\n            name: \"See Z\",\r\n            setupFumen: \"v115@HhglIeglCeR4Aei0hlAeR4zhg0JeAgWHAT4UTAS4CC?A\",\r\n            solutionFumen: \"v115@9ghlwhh0R4AtRpA8glwhg0R4BtRpA8glwhg0B8AtE8?whG8JeAgH\",\r\n            PCGroup: PCGroup.from(\"IJLS\")!,\r\n            success: [\"ZST\", \"ZTS\", \"SZT\", \"STZ\", \"TSZ\", \"TZS\"], // Example test queues\r\n            fails: [\"[ST]!Z\"],\r\n        }),\r\n        new Setup({\r\n            name: \"See SZ\",\r\n            setupFumen: \"v115@LhhlDeg0zhglBeR4i0BeglAeR4KeAgH\",\r\n            solutionFumen: \"v115@9gRpzhh0hlRpBtB8g0R4glF8R4E8BtA8g0B8glJeAg?H\",\r\n            PCGroup: PCGroup.from(\"IJLS\")!,\r\n            success: [\"SZT\", \"STZ\", \"ZST\", \"ZTS\", \"TSZ\", \"TZS\"], // Example test queues\r\n        }),\r\n        new Setup({\r\n            name: \"Cradle\",\r\n            setupFumen: \"v115@DhBthlGeBtglGeBtglDezhBtJeAgH\",\r\n            solutionFumen: \"v115@DhD8GeC8GeC8DeF8JeAgH\",\r\n            PCGroup: PCGroup.from(\"Z\")!,\r\n            success: [\"Z\"], // Example test queue\r\n        }),\r\n        new Setup({\r\n            name: \"use SZ\",\r\n            setupFumen: \"v115@IgAAgH\",\r\n            solutionFumen: \"v115@MgAAgH\",\r\n            PCGroup: PCGroup.from(\"LO\")!,\r\n            success: [\"LO\", \"OL\"], // Example test queues\r\n        }),\r\n        new Setup({\r\n            name: \"PCO\",\r\n            setupFumen: \"v115@9gilEeR4glRpDeR4wwg0RpCeBtxwi0DeBtwwJeAgH\",\r\n            solutionFumen: \"v115@vhAAgH\",\r\n            PCGroup: PCGroup.from(\"TIJLOSZ\")!,\r\n            success: [\"TIJLOSZ\"], // Example test queue\r\n        }),\r\n        new Setup({\r\n            name: \"AntiPCO\",\r\n            setupFumen: \"v115@WgAAgH\",\r\n            solutionFumen: \"v115@XgAAgH\",\r\n            PCGroup: PCGroup.from(\"TIJLSZ\")!,\r\n            success: [\"TIJLSZ\"], // Example test queue\r\n        }),\r\n        new Setup({\r\n            name: \"Zed Setup\",\r\n            setupFumen: \"v115@UgAAgH\",\r\n            solutionFumen: \"v115@VgAAgH\",\r\n            PCGroup: PCGroup.from(\"Z\")!,\r\n            success: [\"Z\"], // Example test queue\r\n        }),\r\n        new Setup({\r\n            name: \"Corner Cover\",\r\n            setupFumen: \"v115@PgAAgH\",\r\n            solutionFumen: \"v115@QgAAgH\",\r\n            PCGroup: PCGroup.from(\"IJLSTZ\")!,\r\n            success: [\"IJLSTZ\"], // Example test queue\r\n        }),\r\n        new Setup({\r\n            name: \"3p\",\r\n            setupFumen: \"v115@OgAAgH\",\r\n            solutionFumen: \"v115@NgAAgH\",\r\n            PCGroup: PCGroup.from(\"ILS\")!,\r\n            success: [\"ILS\", \"ISL\", \"LIS\", \"LSI\", \"SIL\", \"SLI\"], // Example test queues\r\n        }),\r\n        new Setup({\r\n            name: \"\",\r\n            setupFumen: \"v115@YgAAgH\",\r\n            solutionFumen: \"v115@ZgAAgH\",\r\n            PCGroup: PCGroup.from(\"LTJS\")!,\r\n            success: [\"LTJS\"], // Example test queue\r\n        }),\r\n    ];\r\n\r\n    protected name: string;\r\n    protected setupFumen: string;\r\n    protected solutionFumen: string;\r\n    protected success: Set<string> | undefined;\r\n    protected fails: Set<string> | undefined;\r\n    protected PCGroup: PCGroup;\r\n\r\n    constructor({\r\n        name = \"Unnamed Setup\",\r\n        setupFumen = \"v115@vhAAgH\",\r\n        solutionFumen = \"v115@vhAAgH\",\r\n        success,\r\n        fails,\r\n        PCGroup,\r\n    }: {\r\n        name: string;\r\n        setupFumen: string;\r\n        solutionFumen: string;\r\n        success?: string[];\r\n        fails?: string[];\r\n        PCGroup: PCGroup;\r\n    }) {\r\n        this.name = name;\r\n        this.setupFumen = setupFumen;\r\n        this.solutionFumen = solutionFumen;\r\n        this.success = success ? this.preprocessQueues(success) : undefined;\r\n        this.fails = fails ? this.preprocessQueues(fails) : undefined;\r\n        this.PCGroup = PCGroup;\r\n    }\r\n\r\n    // Preprocess queues using the `pieces` function\r\n    private preprocessQueues(queues: string[]): Set<string> {\r\n        const result = new Set<string>();\r\n        for (const queue of queues) {\r\n            for (const expanded of pieces(queue)) {\r\n                result.add(expanded);\r\n            }\r\n        }\r\n        return result;\r\n    }\r\n\r\n    // Static method to calculate coverage for a PCGroup\r\n    public static calculateCoverage(pcGroup: PCGroup): number {\r\n        const permutations = Array.from(pieces(`[${pcGroup.getQueue()}]!p3`)); // Generate all permutations for the PCGroup\r\n        const uniquePermutations = new Set(permutations); // Ensure uniqueness\r\n        let matchingCount = 0;\r\n\r\n        for (const permutation of uniquePermutations) {\r\n            for (const setup of Setup.testSetups) {\r\n                if (setup.getSuccess()?.has(permutation)) {\r\n                    matchingCount++;\r\n                    break; // Stop checking other setups for this permutation\r\n                }\r\n            }\r\n        }\r\n\r\n        return (matchingCount / uniquePermutations.size) * 100; // Return progress as a percentage\r\n    }\r\n\r\n    // Getters\r\n    public getName() {\r\n        return this.name;\r\n    }\r\n    public getSetup() {\r\n        return this.setupFumen;\r\n    }\r\n    public getSolution() {\r\n        return this.solutionFumen;\r\n    }\r\n    public getFails() {\r\n        return this.fails;\r\n    }\r\n    public getSuccess() {\r\n        return this.success;\r\n    }\r\n    public getPCGroup() {\r\n        return this.PCGroup;\r\n    }\r\n}\r\n\r\nexport default Setup;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}