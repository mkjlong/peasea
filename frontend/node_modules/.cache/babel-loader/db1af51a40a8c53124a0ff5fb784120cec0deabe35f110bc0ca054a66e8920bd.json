{"ast":null,"code":"const ORDER = \"TIJLOSZ\";\nfunction sortByPCOrder(a, b) {\n  return ORDER.indexOf(a) - ORDER.indexOf(b);\n}\nfunction getPermutations(str, length) {\n  const results = new Set();\n  const chars = str.split('').sort(); // Sort to make deduplication easier\n\n  function backtrack(path, used) {\n    if (path.length === length) {\n      results.add(path.join(\"\"));\n      return;\n    }\n    for (let i = 0; i < chars.length; i++) {\n      if (used[i]) continue;\n      // Skip duplicates\n      if (i > 0 && chars[i] === chars[i - 1] && !used[i - 1]) continue;\n      used[i] = true;\n      path.push(chars[i]);\n      backtrack(path, used);\n      path.pop();\n      used[i] = false;\n    }\n  }\n  backtrack([], Array(str.length).fill(false));\n  return Array.from(results);\n}\nfunction getCombinations(str, length) {\n  const sorted = [...str].sort(sortByPCOrder);\n  const results = [];\n  function backtrack(start, path) {\n    if (path.length === length) {\n      results.push(path.join(\"\"));\n      return;\n    }\n    for (let i = start; i < sorted.length; i++) {\n      path.push(sorted[i]);\n      backtrack(i + 1, path);\n      path.pop();\n    }\n  }\n  backtrack(0, []);\n  return results;\n}\nexport default function pieces(input) {\n  const parts = [];\n  const regex = /\\[([A-Z]+)\\](p|c)(\\d)|[A-Z]+/g;\n  let match;\n  while ((match = regex.exec(input)) !== null) {\n    if (match[1]) {\n      const chars = match[1];\n      const type = match[2];\n      const amount = parseInt(match[3]);\n      if (type === \"p\") {\n        parts.push(getPermutations(chars, amount));\n      } else {\n        parts.push(getCombinations(chars, amount));\n      }\n    } else {\n      parts.push([match[0]]); // Fixed pieces like \"T\"\n    }\n  }\n\n  // Cartesian product of all parts\n  function cartesianProduct(arrays) {\n    return arrays.reduce((acc, curr) => {\n      const result = [];\n      for (const a of acc) {\n        for (const b of curr) {\n          result.push(a + b);\n        }\n      }\n      return result;\n    }, [\"\"]);\n  }\n  return cartesianProduct(parts);\n}\nfunction checkPieces(queue, pattern) {\n  //Fix queue (remove unnessesary pieces, replace * with [TIJLOSZ].)\n  pattern = pattern.replaceAll(/\\*/g, \"[TIJLOSZ]\").replaceAll(/[^\\[\\]^!TIJLOSZ0-7]/g, \"\");\n\n  //Iterate through each bag and compare to queue\n  for (let [_, set, count = 1] of Array.from(pattern.matchAll(/((?<=\\[)\\^?[TIJLOSZ]{0,7}(?=\\])|[TIJLOSZ])\\]?(?:([!0-7]))?/g))) {\n    set = set.startsWith(\"^\") ? \"TIJLOSZ\".split(\"\").filter(piece => !set.includes(piece)).join(\"\") : set;\n    count = count === \"!\" ? set.length : Number(count);\n    if (queue.length < count || set.length < count) return false;\n    for (let piece of queue.substring(0, count)) {\n      if (!set.includes(piece)) return false;\n      set = set.replace(piece, \"\");\n    }\n    queue = queue.substring(count, queue.length);\n  }\n  return !queue.length;\n}\nfunction checkModifiers(queue, pattern) {\n  return false;\n}\n\n// export default function pieces(queue: string, pattern: string): boolean {\n//     console.log(`Queue: ${queue}, Set: ${pattern}`);\n//     var [pattern, modifiers] = pattern.split(\"{\");\n//     if (modifiers?.endsWith(\"}\"))\n//         modifiers = modifiers.slice(0, modifiers.length - 1);\n//     console.log(`Pattern: ${pattern}, Modifiers: ${modifiers}`);\n\n//     const queuePieces = queue.trim();\n//     return checkPieces(queuePieces, pattern);\n// }","map":{"version":3,"names":["ORDER","sortByPCOrder","a","b","indexOf","getPermutations","str","length","results","Set","chars","split","sort","backtrack","path","used","add","join","i","push","pop","Array","fill","from","getCombinations","sorted","start","pieces","input","parts","regex","match","exec","type","amount","parseInt","cartesianProduct","arrays","reduce","acc","curr","result","checkPieces","queue","pattern","replaceAll","_","set","count","matchAll","startsWith","filter","piece","includes","Number","substring","replace","checkModifiers"],"sources":["C:/Stuff/Github/peasea/frontend/src/scripts/pieces.tsx"],"sourcesContent":["const ORDER = \"TIJLOSZ\";\r\n\r\nfunction sortByPCOrder(a: string, b: string) {\r\n    return ORDER.indexOf(a) - ORDER.indexOf(b);\r\n}\r\n\r\nfunction getPermutations(str: string, length: number): string[] {\r\n    const results: Set<string> = new Set();\r\n    const chars = str.split('').sort(); // Sort to make deduplication easier\r\n\r\n    function backtrack(path: string[], used: boolean[]) {\r\n        if (path.length === length) {\r\n            results.add(path.join(\"\"));\r\n            return;\r\n        }\r\n\r\n        for (let i = 0; i < chars.length; i++) {\r\n            if (used[i]) continue;\r\n            // Skip duplicates\r\n            if (i > 0 && chars[i] === chars[i - 1] && !used[i - 1]) continue;\r\n\r\n            used[i] = true;\r\n            path.push(chars[i]);\r\n            backtrack(path, used);\r\n            path.pop();\r\n            used[i] = false;\r\n        }\r\n    }\r\n\r\n    backtrack([], Array(str.length).fill(false));\r\n    return Array.from(results);\r\n}\r\n\r\n\r\nfunction getCombinations(str: string, length: number): string[] {\r\n    const sorted = [...str].sort(sortByPCOrder);\r\n    const results: string[] = [];\r\n\r\n    function backtrack(start: number, path: string[]) {\r\n        if (path.length === length) {\r\n            results.push(path.join(\"\"));\r\n            return;\r\n        }\r\n        for (let i = start; i < sorted.length; i++) {\r\n            path.push(sorted[i]);\r\n            backtrack(i + 1, path);\r\n            path.pop();\r\n        }\r\n    }\r\n\r\n    backtrack(0, []);\r\n    return results;\r\n}\r\n\r\nexport default function pieces(input: string): string[] {\r\n    const parts: string[][] = [];\r\n    const regex = /\\[([A-Z]+)\\](p|c)(\\d)|[A-Z]+/g;\r\n    let match;\r\n\r\n    while ((match = regex.exec(input)) !== null) {\r\n        if (match[1]) {\r\n            const chars = match[1];\r\n            const type = match[2];\r\n            const amount = parseInt(match[3]);\r\n            if (type === \"p\") {\r\n                parts.push(getPermutations(chars, amount));\r\n            } else {\r\n                parts.push(getCombinations(chars, amount));\r\n            }\r\n        } else {\r\n            parts.push([match[0]]); // Fixed pieces like \"T\"\r\n        }\r\n    }\r\n\r\n    // Cartesian product of all parts\r\n    function cartesianProduct(arrays: string[][]): string[] {\r\n        return arrays.reduce((acc, curr) => {\r\n            const result: string[] = [];\r\n            for (const a of acc) {\r\n                for (const b of curr) {\r\n                    result.push(a + b);\r\n                }\r\n            }\r\n            return result;\r\n        }, [\"\"]);\r\n    }\r\n\r\n    return cartesianProduct(parts);\r\n}\r\n\r\nfunction checkPieces(queue: string, pattern: string): boolean {\r\n    //Fix queue (remove unnessesary pieces, replace * with [TIJLOSZ].)\r\n    pattern = pattern.replaceAll(/\\*/g, \"[TIJLOSZ]\").replaceAll(/[^\\[\\]^!TIJLOSZ0-7]/g, \"\");\r\n\r\n\r\n    //Iterate through each bag and compare to queue\r\n    for (let [_, set, count = 1] of Array.from(pattern.matchAll(/((?<=\\[)\\^?[TIJLOSZ]{0,7}(?=\\])|[TIJLOSZ])\\]?(?:([!0-7]))?/g))) {\r\n        set = set.startsWith(\"^\") ? \"TIJLOSZ\".split(\"\").filter((piece) => !set.includes(piece)).join(\"\") : set;\r\n        count = count === \"!\" ? set.length : Number(count);\r\n        if(queue.length < count || set.length < count)return false;\r\n\r\n        for (let piece of queue.substring(0, count)) {\r\n            if (!set.includes(piece)) return false;\r\n            set = set.replace(piece, \"\");\r\n        }\r\n        queue = queue.substring(count, queue.length);\r\n    }\r\n\r\n    return !queue.length;\r\n}\r\n\r\nfunction checkModifiers(queue: string, pattern: string): boolean {\r\n    \r\n    \r\n    return false;\r\n}\r\n\r\n// export default function pieces(queue: string, pattern: string): boolean {\r\n//     console.log(`Queue: ${queue}, Set: ${pattern}`);\r\n//     var [pattern, modifiers] = pattern.split(\"{\");\r\n//     if (modifiers?.endsWith(\"}\"))\r\n//         modifiers = modifiers.slice(0, modifiers.length - 1);\r\n//     console.log(`Pattern: ${pattern}, Modifiers: ${modifiers}`);\r\n\r\n//     const queuePieces = queue.trim();\r\n//     return checkPieces(queuePieces, pattern);\r\n// }\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}