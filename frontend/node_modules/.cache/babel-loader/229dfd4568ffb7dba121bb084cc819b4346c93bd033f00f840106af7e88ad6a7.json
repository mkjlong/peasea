{"ast":null,"code":"const ORDER = \"TIJLOSZ\";\nfunction sortByPCOrder(a, b) {\n  return ORDER.indexOf(a) - ORDER.indexOf(b);\n}\nconst ALL_PIECES = \"TIJLOSZ\";\nfunction normalizeInput(input) {\n  // Step 1: Remove whitespace, commas, ampersands, etc\n  let cleaned = input.replace(/[\\s,&]/g, \"\");\n\n  // Step 2: Replace lone * with full bag\n  cleaned = cleaned.replace(/\\*/g, ALL_PIECES);\n\n  // Step 3: Normalize [^XYZ] to [inverted]\n  cleaned = cleaned.replace(/\\[\\^([A-Z]+)\\]/g, (_, negated) => {\n    const inverted = ALL_PIECES.split(\"\").filter(c => !negated.includes(c)).join(\"\");\n    return \"[\".concat(inverted, \"]\");\n  });\n\n  // Step 4: Expand [XYZ]! → [XYZ]p<bag.length>\n  cleaned = cleaned.replace(/\\[([A-Z]+)\\]!/g, (_, bag) => \"[\".concat(bag, \"]p\").concat(bag.length));\n\n  // Step 5: Expand [XYZ]N → [XYZ]pN\n  cleaned = cleaned.replace(/\\[([A-Z]+)\\](\\d)/g, (_, bag, count) => \"[\".concat(bag, \"]p\").concat(count));\n\n  // Step 6: Add p1 to bare [XYZ]\n  cleaned = cleaned.replace(/\\[([A-Z]+)\\](?!p\\d)/g, (_, bag) => \"[\".concat(bag, \"]p1\"));\n  return cleaned;\n}\nfunction getPermutations(str, length) {\n  const results = new Set();\n  const chars = str.split('').sort(); // Sort to make deduplication easier\n\n  function backtrack(path, used) {\n    if (path.length === length) {\n      results.add(path.join(\"\"));\n      return;\n    }\n    for (let i = 0; i < chars.length; i++) {\n      if (used[i]) continue;\n      // Skip duplicates\n      if (i > 0 && chars[i] === chars[i - 1] && !used[i - 1]) continue;\n      used[i] = true;\n      path.push(chars[i]);\n      backtrack(path, used);\n      path.pop();\n      used[i] = false;\n    }\n  }\n  backtrack([], Array(str.length).fill(false));\n  return Array.from(results);\n}\nfunction getCombinations(str, length) {\n  const sorted = [...str].sort(sortByPCOrder);\n  const results = [];\n  function backtrack(start, path) {\n    if (path.length === length) {\n      results.push(path.join(\"\"));\n      return;\n    }\n    for (let i = start; i < sorted.length; i++) {\n      path.push(sorted[i]);\n      backtrack(i + 1, path);\n      path.pop();\n    }\n  }\n  backtrack(0, []);\n  return results;\n}\nexport default function pieces(input) {\n  input = normalizeInput(input);\n  console.log(input);\n  const parts = [];\n  const regex = /\\[([A-Z]+)\\](p|c)(\\d)|[A-Z]+/g;\n  let match;\n  while ((match = regex.exec(input)) !== null) {\n    if (match[1]) {\n      const chars = match[1];\n      const type = match[2];\n      const amount = parseInt(match[3]);\n      if (type === \"p\") {\n        parts.push(getPermutations(chars, amount));\n      } else {\n        parts.push(getCombinations(chars, amount));\n      }\n    } else {\n      parts.push([match[0]]); // Fixed pieces like \"T\"\n    }\n  }\n\n  // Cartesian product of all parts\n  function cartesianProduct(arrays) {\n    return arrays.reduce((acc, curr) => {\n      const result = [];\n      for (const a of acc) {\n        for (const b of curr) {\n          result.push(a + b);\n        }\n      }\n      return result;\n    }, [\"\"]);\n  }\n  return cartesianProduct(parts);\n}\nfunction checkPieces(queue, pattern) {\n  //Fix queue (remove unnessesary pieces, replace * with [TIJLOSZ].)\n  pattern = pattern.replaceAll(/\\*/g, \"[TIJLOSZ]\").replaceAll(/[^\\[\\]^!TIJLOSZ0-7]/g, \"\");\n\n  //Iterate through each bag and compare to queue\n  for (let [_, set, count = 1] of Array.from(pattern.matchAll(/((?<=\\[)\\^?[TIJLOSZ]{0,7}(?=\\])|[TIJLOSZ])\\]?(?:([!0-7]))?/g))) {\n    set = set.startsWith(\"^\") ? \"TIJLOSZ\".split(\"\").filter(piece => !set.includes(piece)).join(\"\") : set;\n    count = count === \"!\" ? set.length : Number(count);\n    if (queue.length < count || set.length < count) return false;\n    for (let piece of queue.substring(0, count)) {\n      if (!set.includes(piece)) return false;\n      set = set.replace(piece, \"\");\n    }\n    queue = queue.substring(count, queue.length);\n  }\n  return !queue.length;\n}\nfunction checkModifiers(queue, pattern) {\n  return false;\n}\n\n// export default function pieces(queue: string, pattern: string): boolean {\n//     console.log(`Queue: ${queue}, Set: ${pattern}`);\n//     var [pattern, modifiers] = pattern.split(\"{\");\n//     if (modifiers?.endsWith(\"}\"))\n//         modifiers = modifiers.slice(0, modifiers.length - 1);\n//     console.log(`Pattern: ${pattern}, Modifiers: ${modifiers}`);\n\n//     const queuePieces = queue.trim();\n//     return checkPieces(queuePieces, pattern);\n// }","map":{"version":3,"names":["ORDER","sortByPCOrder","a","b","indexOf","ALL_PIECES","normalizeInput","input","cleaned","replace","_","negated","inverted","split","filter","c","includes","join","concat","bag","length","count","getPermutations","str","results","Set","chars","sort","backtrack","path","used","add","i","push","pop","Array","fill","from","getCombinations","sorted","start","pieces","console","log","parts","regex","match","exec","type","amount","parseInt","cartesianProduct","arrays","reduce","acc","curr","result","checkPieces","queue","pattern","replaceAll","set","matchAll","startsWith","piece","Number","substring","checkModifiers"],"sources":["C:/Stuff/Github/peasea/frontend/src/scripts/pieces.tsx"],"sourcesContent":["const ORDER = \"TIJLOSZ\";\r\n\r\nfunction sortByPCOrder(a: string, b: string) {\r\n    return ORDER.indexOf(a) - ORDER.indexOf(b);\r\n}\r\nconst ALL_PIECES = \"TIJLOSZ\";\r\n\r\nfunction normalizeInput(input: string): string {\r\n    // Step 1: Remove whitespace, commas, ampersands, etc\r\n    let cleaned = input.replace(/[\\s,&]/g, \"\");\r\n\r\n    // Step 2: Replace lone * with full bag\r\n    cleaned = cleaned.replace(/\\*/g, ALL_PIECES);\r\n\r\n    // Step 3: Normalize [^XYZ] to [inverted]\r\n    cleaned = cleaned.replace(/\\[\\^([A-Z]+)\\]/g, (_, negated) => {\r\n        const inverted = ALL_PIECES.split(\"\").filter(c => !negated.includes(c)).join(\"\");\r\n        return `[${inverted}]`;\r\n    });\r\n\r\n    // Step 4: Expand [XYZ]! → [XYZ]p<bag.length>\r\n    cleaned = cleaned.replace(/\\[([A-Z]+)\\]!/g, (_, bag) => `[${bag}]p${bag.length}`);\r\n\r\n    // Step 5: Expand [XYZ]N → [XYZ]pN\r\n    cleaned = cleaned.replace(/\\[([A-Z]+)\\](\\d)/g, (_, bag, count) => `[${bag}]p${count}`);\r\n\r\n    // Step 6: Add p1 to bare [XYZ]\r\n    cleaned = cleaned.replace(/\\[([A-Z]+)\\](?!p\\d)/g, (_, bag) => `[${bag}]p1`);\r\n\r\n    return cleaned;\r\n}\r\n\r\n\r\nfunction getPermutations(str: string, length: number): string[] {\r\n    const results: Set<string> = new Set();\r\n    const chars = str.split('').sort(); // Sort to make deduplication easier\r\n\r\n    function backtrack(path: string[], used: boolean[]) {\r\n        if (path.length === length) {\r\n            results.add(path.join(\"\"));\r\n            return;\r\n        }\r\n\r\n        for (let i = 0; i < chars.length; i++) {\r\n            if (used[i]) continue;\r\n            // Skip duplicates\r\n            if (i > 0 && chars[i] === chars[i - 1] && !used[i - 1]) continue;\r\n\r\n            used[i] = true;\r\n            path.push(chars[i]);\r\n            backtrack(path, used);\r\n            path.pop();\r\n            used[i] = false;\r\n        }\r\n    }\r\n\r\n    backtrack([], Array(str.length).fill(false));\r\n    return Array.from(results);\r\n}\r\n\r\n\r\nfunction getCombinations(str: string, length: number): string[] {\r\n    const sorted = [...str].sort(sortByPCOrder);\r\n    const results: string[] = [];\r\n\r\n    function backtrack(start: number, path: string[]) {\r\n        if (path.length === length) {\r\n            results.push(path.join(\"\"));\r\n            return;\r\n        }\r\n        for (let i = start; i < sorted.length; i++) {\r\n            path.push(sorted[i]);\r\n            backtrack(i + 1, path);\r\n            path.pop();\r\n        }\r\n    }\r\n\r\n    backtrack(0, []);\r\n    return results;\r\n}\r\n\r\nexport default function pieces(input: string): string[] {\r\n    input = normalizeInput(input);\r\n    console.log(input);\r\n    \r\n    const parts: string[][] = [];\r\n    const regex = /\\[([A-Z]+)\\](p|c)(\\d)|[A-Z]+/g;\r\n    let match;\r\n\r\n    while ((match = regex.exec(input)) !== null) {\r\n        if (match[1]) {\r\n            const chars = match[1];\r\n            const type = match[2];\r\n            const amount = parseInt(match[3]);\r\n            if (type === \"p\") {\r\n                parts.push(getPermutations(chars, amount));\r\n            } else {\r\n                parts.push(getCombinations(chars, amount));\r\n            }\r\n        } else {\r\n            parts.push([match[0]]); // Fixed pieces like \"T\"\r\n        }\r\n    }\r\n\r\n    // Cartesian product of all parts\r\n    function cartesianProduct(arrays: string[][]): string[] {\r\n        return arrays.reduce((acc, curr) => {\r\n            const result: string[] = [];\r\n            for (const a of acc) {\r\n                for (const b of curr) {\r\n                    result.push(a + b);\r\n                }\r\n            }\r\n            return result;\r\n        }, [\"\"]);\r\n    }\r\n\r\n    return cartesianProduct(parts);\r\n}\r\n\r\nfunction checkPieces(queue: string, pattern: string): boolean {\r\n    //Fix queue (remove unnessesary pieces, replace * with [TIJLOSZ].)\r\n    pattern = pattern.replaceAll(/\\*/g, \"[TIJLOSZ]\").replaceAll(/[^\\[\\]^!TIJLOSZ0-7]/g, \"\");\r\n\r\n\r\n    //Iterate through each bag and compare to queue\r\n    for (let [_, set, count = 1] of Array.from(pattern.matchAll(/((?<=\\[)\\^?[TIJLOSZ]{0,7}(?=\\])|[TIJLOSZ])\\]?(?:([!0-7]))?/g))) {\r\n        set = set.startsWith(\"^\") ? \"TIJLOSZ\".split(\"\").filter((piece) => !set.includes(piece)).join(\"\") : set;\r\n        count = count === \"!\" ? set.length : Number(count);\r\n        if(queue.length < count || set.length < count)return false;\r\n\r\n        for (let piece of queue.substring(0, count)) {\r\n            if (!set.includes(piece)) return false;\r\n            set = set.replace(piece, \"\");\r\n        }\r\n        queue = queue.substring(count, queue.length);\r\n    }\r\n\r\n    return !queue.length;\r\n}\r\n\r\nfunction checkModifiers(queue: string, pattern: string): boolean {\r\n    \r\n    \r\n    return false;\r\n}\r\n\r\n// export default function pieces(queue: string, pattern: string): boolean {\r\n//     console.log(`Queue: ${queue}, Set: ${pattern}`);\r\n//     var [pattern, modifiers] = pattern.split(\"{\");\r\n//     if (modifiers?.endsWith(\"}\"))\r\n//         modifiers = modifiers.slice(0, modifiers.length - 1);\r\n//     console.log(`Pattern: ${pattern}, Modifiers: ${modifiers}`);\r\n\r\n//     const queuePieces = queue.trim();\r\n//     return checkPieces(queuePieces, pattern);\r\n// }\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}