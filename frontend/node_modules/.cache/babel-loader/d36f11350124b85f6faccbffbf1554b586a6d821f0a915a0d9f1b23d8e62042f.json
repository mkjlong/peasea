{"ast":null,"code":"/*import { compressToEncodedURIComponent } from \"lz-string\";\r\nexport default async function getFumenFromReplay(replayUrl: string): Promise<any | null> {\r\n  const target = \"jstris.jezevec10.com\";\r\n  if (!replayUrl.includes(target)) {\r\n      throw new Error(\"Invalid replay URL. It must be from jstris.jezevec10.com.\");\r\n  }\r\n\r\n  const parts = replayUrl.split(\"/\");\r\n  if (parts.length < 5 || parts[3] !== \"replay\") {\r\n      throw new Error(\"Invalid replay URL format.\");\r\n  }\r\n\r\n  const id = parts[4];\r\n  const URL = `https://jstris.jezevec10.com/replay/data?id=${id}&type=0`;\r\n  const proxyUrl = `https://api.allorigins.win/get?url=${encodeURIComponent(URL)}`;\r\n\r\n  try {\r\n      const response = await fetch(proxyUrl);\r\n      if (!response.ok) throw new Error(\"Failed to fetch replay data.\");\r\n      const data = await response.json();\r\n      const replayData = JSON.parse(data.contents).d;\r\n\r\n      // Log raw replay data\r\n      console.log(\"Raw Replay Data:\", replayData);\r\n\r\n      const compressedData = compressToEncodedURIComponent(replayData);\r\n\r\n      // Log compressed data\r\n      console.log(\"Compressed Replay Data:\", compressedData);\r\n\r\n      // Send to TSTMan\r\n      const tstmanResponse = await fetch(`https://fumen.tstman.net/jstris`, {\r\n          method: \"POST\",\r\n          headers: {\r\n              Accept: \"application/json\",\r\n              \"Content-Type\": \"application/json\",\r\n          },\r\n          body: JSON.stringify({ replay: compressedData }),\r\n      });\r\n\r\n      if (!tstmanResponse.ok) {\r\n          const errorData = await tstmanResponse.text();\r\n          console.error(\"TSTMan API Error Response:\", errorData);\r\n          throw new Error(\"Failed to fetch Fumen data from TSTMan.\");\r\n      }\r\n\r\n      const tstmanData = await tstmanResponse.json();\r\n      console.log(\"Fumen Data:\", tstmanData);\r\n\r\n      return tstmanData.fumen;\r\n\r\n  } catch (error) {\r\n      console.error(\"Error in getFumenFromReplay:\", error);\r\n      throw error;\r\n  }\r\n}\r\n*/\n\nimport { decoder } from \"tetris-fumen\";\nimport { compressToEncodedURIComponent } from \"lz-string\";\nconst getDefaultLabel = function () {\n  return window.innerWidth < 640 ? \"Link/Code Upload\" : \"Upload a Replay Code/Link\";\n};\nexport default function parseFile(txt) {\n  // Check if it is a url\n  // Credits: https://github.com/cringemoment/\n  const target = \"jstris.jezevec10.com\";\n  if (txt.indexOf(target) >= 0) {\n    const parts = txt.split(\"/\");\n    if (parts.length < 5) {\n      throw new Error(\"\");\n      return;\n    }\n    if (parts[3] != \"replay\" || !parts[2].endsWith(target)) {\n      throw new Error(\"\");\n      return;\n    }\n    let id = parts[4];\n    if (parts.length > 5) {\n      id = parts[5];\n    }\n    const url = \"https://corsproxy.io/?\" + encodeURIComponent(\"https://\" + parts[2] + \"/replay/data?id=\" + id + \"&type=0\");\n    fetch(url).then(response => {\n      if (!response.ok) {\n        throw new Error(\"\");\n      }\n      response.text().then(text => {\n        const comp = compressToEncodedURIComponent(text);\n        codeToFumen(comp);\n      });\n    });\n  } else {\n    codeToFumen(txt);\n  }\n}\nfunction codeToFumen(replayCode) {\n  fetch(\"https://fumen.tstman.net/jstris\", {\n    method: \"POST\",\n    headers: {\n      Accept: \"application/json\",\n      \"Content-Type\": \"application/json\"\n    },\n    body: \"replay=\".concat(replayCode)\n  }).then(response => {\n    if (!response.ok) {\n      throw new Error(\"\");\n    } else {\n      response.json().then(data => {\n        parseFumen(data.fumen);\n      });\n    }\n  });\n}\nfunction parseFumen(fumenUrl) {\n  const pages = decoder.decode(fumenUrl);\n  const ret = [];\n  let curStateArrays = [];\n  let curPCNumber = 0;\n  let curPCLoopIndicator = 1;\n  for (let idx = 0; idx < pages.length; idx++) {\n    const page = pages[idx];\n    let board = \"\";\n    let hasMino = false;\n    for (let y = 3; y >= 0; y--) {\n      for (let x = 0; x < 10; x++) {\n        const mino = page.field.at(x, y);\n        if (mino !== \"_\") {\n          board += mino;\n          hasMino = true;\n        } else {\n          board += \"N\";\n        }\n      }\n    }\n    let queue = \"\";\n    const comment = page.comment;\n    let i;\n    if (comment[4] !== \"]\") {\n      queue = comment[4] + comment[7];\n      i = 9;\n    } else {\n      queue = comment[6];\n      i = 8;\n    }\n    while (queue.length < 7 && i < comment.length) {\n      queue += comment[i];\n      i += 1;\n    }\n    if (!hasMino && curStateArrays.length > 0) {\n      ret.push({\n        PCNumber: curPCNumber,\n        PCLoopIndicator: curPCLoopIndicator,\n        stateArray: curStateArrays\n      });\n      curStateArrays = [];\n      curPCNumber += 1;\n      curPCLoopIndicator = idx * 5 % 7 + 1;\n    }\n    // Probably end of the replay\n    if (queue.length === 7) {\n      curStateArrays.push({\n        board: board,\n        queue: queue,\n        placedBlocks: idx\n      });\n    } else if (idx < pages.length - 1) {\n      throw new Error(\"\");\n    }\n  }\n  if (curStateArrays.length > 0) {\n    ret.push({\n      PCNumber: curPCNumber,\n      PCLoopIndicator: curPCLoopIndicator,\n      stateArray: curStateArrays\n    });\n  }\n}","map":{"version":3,"names":["decoder","compressToEncodedURIComponent","getDefaultLabel","window","innerWidth","parseFile","txt","target","indexOf","parts","split","length","Error","endsWith","id","url","encodeURIComponent","fetch","then","response","ok","text","comp","codeToFumen","replayCode","method","headers","Accept","body","concat","json","data","parseFumen","fumen","fumenUrl","pages","decode","ret","curStateArrays","curPCNumber","curPCLoopIndicator","idx","page","board","hasMino","y","x","mino","field","at","queue","comment","i","push","PCNumber","PCLoopIndicator","stateArray","placedBlocks"],"sources":["C:/Stuff/Github/peasea/src/scripts/upload.tsx"],"sourcesContent":["/*import { compressToEncodedURIComponent } from \"lz-string\";\r\nexport default async function getFumenFromReplay(replayUrl: string): Promise<any | null> {\r\n  const target = \"jstris.jezevec10.com\";\r\n  if (!replayUrl.includes(target)) {\r\n      throw new Error(\"Invalid replay URL. It must be from jstris.jezevec10.com.\");\r\n  }\r\n\r\n  const parts = replayUrl.split(\"/\");\r\n  if (parts.length < 5 || parts[3] !== \"replay\") {\r\n      throw new Error(\"Invalid replay URL format.\");\r\n  }\r\n\r\n  const id = parts[4];\r\n  const URL = `https://jstris.jezevec10.com/replay/data?id=${id}&type=0`;\r\n  const proxyUrl = `https://api.allorigins.win/get?url=${encodeURIComponent(URL)}`;\r\n\r\n  try {\r\n      const response = await fetch(proxyUrl);\r\n      if (!response.ok) throw new Error(\"Failed to fetch replay data.\");\r\n      const data = await response.json();\r\n      const replayData = JSON.parse(data.contents).d;\r\n\r\n      // Log raw replay data\r\n      console.log(\"Raw Replay Data:\", replayData);\r\n\r\n      const compressedData = compressToEncodedURIComponent(replayData);\r\n\r\n      // Log compressed data\r\n      console.log(\"Compressed Replay Data:\", compressedData);\r\n\r\n      // Send to TSTMan\r\n      const tstmanResponse = await fetch(`https://fumen.tstman.net/jstris`, {\r\n          method: \"POST\",\r\n          headers: {\r\n              Accept: \"application/json\",\r\n              \"Content-Type\": \"application/json\",\r\n          },\r\n          body: JSON.stringify({ replay: compressedData }),\r\n      });\r\n\r\n      if (!tstmanResponse.ok) {\r\n          const errorData = await tstmanResponse.text();\r\n          console.error(\"TSTMan API Error Response:\", errorData);\r\n          throw new Error(\"Failed to fetch Fumen data from TSTMan.\");\r\n      }\r\n\r\n      const tstmanData = await tstmanResponse.json();\r\n      console.log(\"Fumen Data:\", tstmanData);\r\n\r\n      return tstmanData.fumen;\r\n\r\n  } catch (error) {\r\n      console.error(\"Error in getFumenFromReplay:\", error);\r\n      throw error;\r\n  }\r\n}\r\n*/\r\n\r\nimport { decoder } from \"tetris-fumen\";\r\nimport { compressToEncodedURIComponent } from \"lz-string\";\r\n\r\nconst getDefaultLabel = function () {\r\n    return window.innerWidth < 640\r\n        ? \"Link/Code Upload\"\r\n        : \"Upload a Replay Code/Link\";\r\n};\r\n\r\nexport default function parseFile(txt: string) {\r\n    // Check if it is a url\r\n    // Credits: https://github.com/cringemoment/\r\n    const target = \"jstris.jezevec10.com\";\r\n    if (txt.indexOf(target) >= 0) {\r\n        const parts = txt.split(\"/\");\r\n        if (parts.length < 5) {\r\n            throw new Error(\"\");\r\n            return;\r\n        }\r\n\r\n        if (parts[3] != \"replay\" || !parts[2].endsWith(target)) {\r\n            throw new Error(\"\");\r\n            return;\r\n        }\r\n\r\n        let id = parts[4];\r\n        if (parts.length > 5) {\r\n            id = parts[5];\r\n        }\r\n\r\n        const url =\r\n            \"https://corsproxy.io/?\" +\r\n            encodeURIComponent(\r\n                \"https://\" + parts[2] + \"/replay/data?id=\" + id + \"&type=0\"\r\n            );\r\n        fetch(url).then((response) => {\r\n            if (!response.ok) {\r\n                throw new Error(\"\");\r\n            }\r\n            response.text().then((text) => {\r\n                const comp = compressToEncodedURIComponent(text);\r\n                codeToFumen(comp);\r\n            });\r\n        });\r\n    } else {\r\n        codeToFumen(txt);\r\n    }\r\n}\r\n\r\nfunction codeToFumen(replayCode: string) {\r\n    fetch(`https://fumen.tstman.net/jstris`, {\r\n        method: \"POST\",\r\n        headers: {\r\n            Accept: \"application/json\",\r\n            \"Content-Type\": \"application/json\",\r\n        },\r\n        body: `replay=${replayCode}`,\r\n    }).then((response) => {\r\n        if (!response.ok) {\r\n            throw new Error(\"\");\r\n        } else {\r\n            response.json().then((data) => {\r\n                parseFumen(data.fumen);\r\n            });\r\n        }\r\n    });\r\n}\r\n\r\nfunction parseFumen(fumenUrl: string) {\r\n    const pages = decoder.decode(fumenUrl);\r\n\r\n    const ret = [];\r\n    let curStateArrays = [];\r\n    let curPCNumber = 0;\r\n    let curPCLoopIndicator = 1;\r\n    for (let idx = 0; idx < pages.length; idx++) {\r\n        const page = pages[idx];\r\n\r\n        let board = \"\";\r\n        let hasMino = false;\r\n        for (let y = 3; y >= 0; y--) {\r\n            for (let x = 0; x < 10; x++) {\r\n                const mino = page.field.at(x, y);\r\n                if (mino !== \"_\") {\r\n                    board += mino;\r\n                    hasMino = true;\r\n                } else {\r\n                    board += \"N\";\r\n                }\r\n            }\r\n        }\r\n\r\n        let queue = \"\";\r\n        const comment = page.comment;\r\n        let i;\r\n        if (comment[4] !== \"]\") {\r\n            queue = comment[4] + comment[7];\r\n            i = 9;\r\n        } else {\r\n            queue = comment[6];\r\n            i = 8;\r\n        }\r\n\r\n        while (queue.length < 7 && i < comment.length) {\r\n            queue += comment[i];\r\n            i += 1;\r\n        }\r\n\r\n        if (!hasMino && curStateArrays.length > 0) {\r\n            ret.push({\r\n                PCNumber: curPCNumber,\r\n                PCLoopIndicator: curPCLoopIndicator,\r\n                stateArray: curStateArrays,\r\n            });\r\n            curStateArrays = [];\r\n            curPCNumber += 1;\r\n            curPCLoopIndicator = ((idx * 5) % 7) + 1;\r\n        }\r\n        // Probably end of the replay\r\n        if (queue.length === 7) {\r\n            curStateArrays.push({\r\n                board: board,\r\n                queue: queue,\r\n                placedBlocks: idx,\r\n            });\r\n        } else if (idx < pages.length - 1) {\r\n            throw new Error(\"\");\r\n        }\r\n    }\r\n    if (curStateArrays.length > 0) {\r\n        ret.push({\r\n            PCNumber: curPCNumber,\r\n            PCLoopIndicator: curPCLoopIndicator,\r\n            stateArray: curStateArrays,\r\n        });\r\n    }\r\n}\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}