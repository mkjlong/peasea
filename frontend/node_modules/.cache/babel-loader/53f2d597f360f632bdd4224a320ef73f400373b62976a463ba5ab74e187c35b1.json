{"ast":null,"code":"var _jsxFileName = \"C:\\\\Stuff\\\\Github\\\\peasea\\\\frontend\\\\src\\\\pages\\\\MethodPage\\\\MethodPage.tsx\",\n  _s = $RefreshSig$();\nimport { useParams } from \"react-router-dom\";\nimport classes from \"./MethodPage.module.css\";\nimport { useEffect } from \"react\";\nimport { useSidebar } from \"../../contexts/SidebarContext\";\nimport { useNavbar } from \"../../contexts/NavContext\";\nimport MethodChooser from \"../../components/MethodChooser/MethodChooser\";\nimport SetupPreview from \"../../components/SetupPreview/SetupPreview\";\nimport Setup from \"../../scripts/Setup\";\nimport { PCGroup } from \"../../scripts/PCGroup\";\nimport Redirect from \"../Redirect/Redirect\";\nimport { jsxDEV as _jsxDEV, Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nconst testSetups = Setup.testSetups;\nconst MethodPage = () => {\n  _s();\n  const {\n    setSidebar\n  } = useSidebar();\n  const {\n    setNavbar\n  } = useNavbar();\n  const {\n    queue\n  } = useParams();\n  const pcGroup = new PCGroup(queue !== null && queue !== void 0 ? queue : \"\");\n  if (queue !== pcGroup.getCode().toString()) {\n    return /*#__PURE__*/_jsxDEV(Redirect, {\n      href: \"/\".concat(pcGroup.getCode())\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 26,\n      columnNumber: 16\n    }, this);\n  }\n  const pc = pcGroup.getPC();\n  useEffect(() => {\n    setSidebar(\"\".concat(pcGroup, \" Methods\"), /*#__PURE__*/_jsxDEV(MethodChooser, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 32,\n      columnNumber: 42\n    }, this));\n    setNavbar(/*#__PURE__*/_jsxDEV(_Fragment, {\n      children: [/*#__PURE__*/_jsxDEV(\"a\", {\n        className: classes.link,\n        href: \"../\".concat(pc.getIter()),\n        children: \"\".concat(pc)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 35,\n        columnNumber: 17\n      }, this), \" \", \"\\u2022 \", pcGroup.toString()]\n    }, void 0, true), /*#__PURE__*/_jsxDEV(_Fragment, {}, void 0, false));\n  }, []);\n  console.log(\"PCGroup code: \".concat(pcGroup.getCode()));\n\n  // Filter setups that match this PCGroup queue\n  const matchingSetups = testSetups.filter(setup => setup.getPCGroup().equals(pcGroup));\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: classes.methodPage,\n    children: /*#__PURE__*/_jsxDEV(\"div\", {\n      className: classes.setupList,\n      children: matchingSetups.map((setup, idx) => /*#__PURE__*/_jsxDEV(SetupPreview, {\n        setup: setup\n      }, idx, false, {\n        fileName: _jsxFileName,\n        lineNumber: 55,\n        columnNumber: 21\n      }, this))\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 53,\n      columnNumber: 13\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 52,\n    columnNumber: 9\n  }, this);\n};\n_s(MethodPage, \"Jfs+k5XGlUvZVLnXQPdj8GOP9cg=\", false, function () {\n  return [useSidebar, useNavbar, useParams];\n});\n_c = MethodPage;\nexport default MethodPage;\nvar _c;\n$RefreshReg$(_c, \"MethodPage\");","map":{"version":3,"names":["useParams","classes","useEffect","useSidebar","useNavbar","MethodChooser","SetupPreview","Setup","PCGroup","Redirect","jsxDEV","_jsxDEV","Fragment","_Fragment","testSetups","MethodPage","_s","setSidebar","setNavbar","queue","pcGroup","getCode","toString","href","concat","fileName","_jsxFileName","lineNumber","columnNumber","pc","getPC","children","className","link","getIter","console","log","matchingSetups","filter","setup","getPCGroup","equals","methodPage","setupList","map","idx","_c","$RefreshReg$"],"sources":["C:/Stuff/Github/peasea/frontend/src/pages/MethodPage/MethodPage.tsx"],"sourcesContent":["import { useParams } from \"react-router-dom\";\r\nimport classes from \"./MethodPage.module.css\";\r\nimport { useEffect } from \"react\";\r\nimport { useSidebar } from \"../../contexts/SidebarContext\";\r\nimport { useNavbar } from \"../../contexts/NavContext\";\r\nimport SetChooser from \"../../components/SetChooser/SetChooser\";\r\nimport MethodChooser from \"../../components/MethodChooser/MethodChooser\";\r\nimport SetupPreview from \"../../components/SetupPreview/SetupPreview\";\r\nimport { PC } from \"../../scripts/PC\";\r\nimport Setup from \"../../scripts/Setup\";\r\nimport { PCGroup } from \"../../scripts/PCGroup\";\r\nimport { normalizedSort } from \"../../../../scripts/pieces\";\r\nimport Redirect from \"../Redirect/Redirect\";\r\n\r\ninterface MethodPage {}\r\n\r\nconst testSetups = Setup.testSetups;\r\nconst MethodPage = () => {\r\n    const { setSidebar } = useSidebar();\r\n    const { setNavbar } = useNavbar();\r\n    const { queue } = useParams();\r\n\r\n    const pcGroup = new PCGroup(queue ?? \"\");\r\n\r\n    if(queue !== pcGroup.getCode().toString()){\r\n        return <Redirect href={`/${pcGroup.getCode()}`} />;\r\n    }\r\n\r\n    const pc = pcGroup.getPC();\r\n\r\n    useEffect(() => {\r\n        setSidebar(`${pcGroup} Methods`, <MethodChooser />);\r\n        setNavbar(\r\n            <>\r\n                <a\r\n                    className={classes.link}\r\n                    href={`../${pc.getIter()}`}\r\n                >{`${pc}`}</a>{\" \"}\r\n                â€¢ {pcGroup.toString()}\r\n            </>,\r\n            <></>\r\n        );\r\n    }, []);\r\n\r\n    console.log(`PCGroup code: ${pcGroup.getCode()}`);\r\n    \r\n\r\n    // Filter setups that match this PCGroup queue\r\n    const matchingSetups = testSetups.filter((setup) => setup.getPCGroup().equals(pcGroup));\r\n\r\n    return (\r\n        <div className={classes.methodPage}>\r\n            <div className={classes.setupList}>\r\n                {matchingSetups.map((setup, idx) => (\r\n                    <SetupPreview key={idx} setup={setup} />\r\n                ))}\r\n            </div>\r\n        </div>\r\n    );\r\n};\r\nexport default MethodPage;\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}