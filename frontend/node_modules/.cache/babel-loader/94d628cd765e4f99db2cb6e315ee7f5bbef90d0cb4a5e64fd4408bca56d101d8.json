{"ast":null,"code":"/*import { compressToEncodedURIComponent } from \"lz-string\";\r\nexport default async function getFumenFromReplay(replayUrl: string): Promise<any | null> {\r\n  const target = \"jstris.jezevec10.com\";\r\n  if (!replayUrl.includes(target)) {\r\n      throw new Error(\"Invalid replay URL. It must be from jstris.jezevec10.com.\");\r\n  }\r\n\r\n  const parts = replayUrl.split(\"/\");\r\n  if (parts.length < 5 || parts[3] !== \"replay\") {\r\n      throw new Error(\"Invalid replay URL format.\");\r\n  }\r\n\r\n  const id = parts[4];\r\n  const URL = `https://jstris.jezevec10.com/replay/data?id=${id}&type=0`;\r\n  const proxyUrl = `https://api.allorigins.win/get?url=${encodeURIComponent(URL)}`;\r\n\r\n  try {\r\n      const response = await fetch(proxyUrl);\r\n      if (!response.ok) throw new Error(\"Failed to fetch replay data.\");\r\n      const data = await response.json();\r\n      const replayData = JSON.parse(data.contents).d;\r\n\r\n      // Log raw replay data\r\n      console.log(\"Raw Replay Data:\", replayData);\r\n\r\n      const compressedData = compressToEncodedURIComponent(replayData);\r\n\r\n      // Log compressed data\r\n      console.log(\"Compressed Replay Data:\", compressedData);\r\n\r\n      // Send to TSTMan\r\n      const tstmanResponse = await fetch(`https://fumen.tstman.net/jstris`, {\r\n          method: \"POST\",\r\n          headers: {\r\n              Accept: \"application/json\",\r\n              \"Content-Type\": \"application/json\",\r\n          },\r\n          body: JSON.stringify({ replay: compressedData }),\r\n      });\r\n\r\n      if (!tstmanResponse.ok) {\r\n          const errorData = await tstmanResponse.text();\r\n          console.error(\"TSTMan API Error Response:\", errorData);\r\n          throw new Error(\"Failed to fetch Fumen data from TSTMan.\");\r\n      }\r\n\r\n      const tstmanData = await tstmanResponse.json();\r\n      console.log(\"Fumen Data:\", tstmanData);\r\n\r\n      return tstmanData.fumen;\r\n\r\n  } catch (error) {\r\n      console.error(\"Error in getFumenFromReplay:\", error);\r\n      throw error;\r\n  }\r\n}\r\n*/\n\nimport { compressToEncodedURIComponent } from \"lz-string\";\nexport default function parseFile(txt) {\n  // Check if it is a url\n  // Credits: https://github.com/cringemoment/\n  const target = \"jstris.jezevec10.com\";\n  if (txt.indexOf(target) >= 0) {\n    const parts = txt.split(\"/\");\n    if (parts.length < 5) {\n      throw new Error(\"\");\n    }\n    if (parts[3] != \"replay\" || !parts[2].endsWith(target)) {\n      throw new Error(\"\");\n    }\n    let id = parts[4];\n    if (parts.length > 5) {\n      id = parts[5];\n    }\n    const url = \"https://corsproxy.io/?\" + encodeURIComponent(\"https://\" + parts[2] + \"/replay/data?id=\" + id + \"&type=0\");\n    fetch(url).then(response => {\n      if (!response.ok) {\n        throw new Error(\"\");\n      }\n      response.text().then(text => {\n        const comp = compressToEncodedURIComponent(text);\n        return codeToFumen(comp);\n      });\n    });\n  } else {\n    return codeToFumen(txt);\n  }\n  return null;\n}\nfunction codeToFumen(replayCode) {\n  fetch(\"https://fumen.tstman.net/jstris\", {\n    method: \"POST\",\n    headers: {\n      Accept: \"application/json\",\n      \"Content-Type\": \"application/json\"\n    },\n    body: \"replay=\".concat(replayCode)\n  }).then(response => {\n    if (!response.ok) {\n      throw new Error(\"\");\n    } else {\n      response.json().then(data => {\n        return data.fumen;\n        //return parseFumen(data.fumen);\n      });\n    }\n  });\n  //return null;\n}","map":{"version":3,"names":["compressToEncodedURIComponent","parseFile","txt","target","indexOf","parts","split","length","Error","endsWith","id","url","encodeURIComponent","fetch","then","response","ok","text","comp","codeToFumen","replayCode","method","headers","Accept","body","concat","json","data","fumen"],"sources":["C:/Stuff/Github/peasea/src/scripts/upload.tsx"],"sourcesContent":["/*import { compressToEncodedURIComponent } from \"lz-string\";\r\nexport default async function getFumenFromReplay(replayUrl: string): Promise<any | null> {\r\n  const target = \"jstris.jezevec10.com\";\r\n  if (!replayUrl.includes(target)) {\r\n      throw new Error(\"Invalid replay URL. It must be from jstris.jezevec10.com.\");\r\n  }\r\n\r\n  const parts = replayUrl.split(\"/\");\r\n  if (parts.length < 5 || parts[3] !== \"replay\") {\r\n      throw new Error(\"Invalid replay URL format.\");\r\n  }\r\n\r\n  const id = parts[4];\r\n  const URL = `https://jstris.jezevec10.com/replay/data?id=${id}&type=0`;\r\n  const proxyUrl = `https://api.allorigins.win/get?url=${encodeURIComponent(URL)}`;\r\n\r\n  try {\r\n      const response = await fetch(proxyUrl);\r\n      if (!response.ok) throw new Error(\"Failed to fetch replay data.\");\r\n      const data = await response.json();\r\n      const replayData = JSON.parse(data.contents).d;\r\n\r\n      // Log raw replay data\r\n      console.log(\"Raw Replay Data:\", replayData);\r\n\r\n      const compressedData = compressToEncodedURIComponent(replayData);\r\n\r\n      // Log compressed data\r\n      console.log(\"Compressed Replay Data:\", compressedData);\r\n\r\n      // Send to TSTMan\r\n      const tstmanResponse = await fetch(`https://fumen.tstman.net/jstris`, {\r\n          method: \"POST\",\r\n          headers: {\r\n              Accept: \"application/json\",\r\n              \"Content-Type\": \"application/json\",\r\n          },\r\n          body: JSON.stringify({ replay: compressedData }),\r\n      });\r\n\r\n      if (!tstmanResponse.ok) {\r\n          const errorData = await tstmanResponse.text();\r\n          console.error(\"TSTMan API Error Response:\", errorData);\r\n          throw new Error(\"Failed to fetch Fumen data from TSTMan.\");\r\n      }\r\n\r\n      const tstmanData = await tstmanResponse.json();\r\n      console.log(\"Fumen Data:\", tstmanData);\r\n\r\n      return tstmanData.fumen;\r\n\r\n  } catch (error) {\r\n      console.error(\"Error in getFumenFromReplay:\", error);\r\n      throw error;\r\n  }\r\n}\r\n*/\r\n\r\nimport { decoder } from \"tetris-fumen\";\r\nimport { compressToEncodedURIComponent } from \"lz-string\";\r\n\r\nexport default function parseFile(txt: string) {\r\n    // Check if it is a url\r\n    // Credits: https://github.com/cringemoment/\r\n    const target = \"jstris.jezevec10.com\";\r\n    if (txt.indexOf(target) >= 0) {\r\n        const parts = txt.split(\"/\");\r\n        if (parts.length < 5) {\r\n            throw new Error(\"\");\r\n        }\r\n\r\n        if (parts[3] != \"replay\" || !parts[2].endsWith(target)) {\r\n            throw new Error(\"\");\r\n        }\r\n\r\n        let id = parts[4];\r\n        if (parts.length > 5) {\r\n            id = parts[5];\r\n        }\r\n\r\n        const url =\r\n            \"https://corsproxy.io/?\" +\r\n            encodeURIComponent(\r\n                \"https://\" + parts[2] + \"/replay/data?id=\" + id + \"&type=0\"\r\n            );\r\n        fetch(url).then((response) => {\r\n            if (!response.ok) {\r\n                throw new Error(\"\");\r\n            }\r\n            response.text().then((text) => {\r\n                const comp = compressToEncodedURIComponent(text);\r\n                return codeToFumen(comp);\r\n            });\r\n        });\r\n    } else {\r\n        return codeToFumen(txt);\r\n    }\r\n    return null;\r\n}\r\n\r\nfunction codeToFumen(replayCode: string) {\r\n    fetch(`https://fumen.tstman.net/jstris`, {\r\n        method: \"POST\",\r\n        headers: {\r\n            Accept: \"application/json\",\r\n            \"Content-Type\": \"application/json\",\r\n        },\r\n        body: `replay=${replayCode}`,\r\n    }).then((response) => {\r\n        if (!response.ok) {\r\n            throw new Error(\"\");\r\n        } else {\r\n            response.json().then((data) => {\r\n              return data.fumen;  \r\n              //return parseFumen(data.fumen);\r\n            });\r\n        }\r\n    });\r\n    //return null;\r\n}\r\n\r\n"],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAGA,SAASA,6BAA6B,QAAQ,WAAW;AAEzD,eAAe,SAASC,SAASA,CAACC,GAAW,EAAE;EAC3C;EACA;EACA,MAAMC,MAAM,GAAG,sBAAsB;EACrC,IAAID,GAAG,CAACE,OAAO,CAACD,MAAM,CAAC,IAAI,CAAC,EAAE;IAC1B,MAAME,KAAK,GAAGH,GAAG,CAACI,KAAK,CAAC,GAAG,CAAC;IAC5B,IAAID,KAAK,CAACE,MAAM,GAAG,CAAC,EAAE;MAClB,MAAM,IAAIC,KAAK,CAAC,EAAE,CAAC;IACvB;IAEA,IAAIH,KAAK,CAAC,CAAC,CAAC,IAAI,QAAQ,IAAI,CAACA,KAAK,CAAC,CAAC,CAAC,CAACI,QAAQ,CAACN,MAAM,CAAC,EAAE;MACpD,MAAM,IAAIK,KAAK,CAAC,EAAE,CAAC;IACvB;IAEA,IAAIE,EAAE,GAAGL,KAAK,CAAC,CAAC,CAAC;IACjB,IAAIA,KAAK,CAACE,MAAM,GAAG,CAAC,EAAE;MAClBG,EAAE,GAAGL,KAAK,CAAC,CAAC,CAAC;IACjB;IAEA,MAAMM,GAAG,GACL,wBAAwB,GACxBC,kBAAkB,CACd,UAAU,GAAGP,KAAK,CAAC,CAAC,CAAC,GAAG,kBAAkB,GAAGK,EAAE,GAAG,SACtD,CAAC;IACLG,KAAK,CAACF,GAAG,CAAC,CAACG,IAAI,CAAEC,QAAQ,IAAK;MAC1B,IAAI,CAACA,QAAQ,CAACC,EAAE,EAAE;QACd,MAAM,IAAIR,KAAK,CAAC,EAAE,CAAC;MACvB;MACAO,QAAQ,CAACE,IAAI,CAAC,CAAC,CAACH,IAAI,CAAEG,IAAI,IAAK;QAC3B,MAAMC,IAAI,GAAGlB,6BAA6B,CAACiB,IAAI,CAAC;QAChD,OAAOE,WAAW,CAACD,IAAI,CAAC;MAC5B,CAAC,CAAC;IACN,CAAC,CAAC;EACN,CAAC,MAAM;IACH,OAAOC,WAAW,CAACjB,GAAG,CAAC;EAC3B;EACA,OAAO,IAAI;AACf;AAEA,SAASiB,WAAWA,CAACC,UAAkB,EAAE;EACrCP,KAAK,oCAAoC;IACrCQ,MAAM,EAAE,MAAM;IACdC,OAAO,EAAE;MACLC,MAAM,EAAE,kBAAkB;MAC1B,cAAc,EAAE;IACpB,CAAC;IACDC,IAAI,YAAAC,MAAA,CAAYL,UAAU;EAC9B,CAAC,CAAC,CAACN,IAAI,CAAEC,QAAQ,IAAK;IAClB,IAAI,CAACA,QAAQ,CAACC,EAAE,EAAE;MACd,MAAM,IAAIR,KAAK,CAAC,EAAE,CAAC;IACvB,CAAC,MAAM;MACHO,QAAQ,CAACW,IAAI,CAAC,CAAC,CAACZ,IAAI,CAAEa,IAAI,IAAK;QAC7B,OAAOA,IAAI,CAACC,KAAK;QACjB;MACF,CAAC,CAAC;IACN;EACJ,CAAC,CAAC;EACF;AACJ","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}