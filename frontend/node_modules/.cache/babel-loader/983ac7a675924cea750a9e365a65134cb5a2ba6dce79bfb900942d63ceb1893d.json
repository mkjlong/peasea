{"ast":null,"code":"function checkPieces(queue, pieces) {\n  // Parse the pieces string to get the sets and their counts\n  pieces = pieces.replaceAll(\"*\", \"[TIJLOSZ]\");\n\n  // Iterate through the matches\n  for (const [_, set, count = 1] of Array.from(pieces.matchAll(/\\[(\\^?[TIJLOSZ]{0,7})\\](?=p([0-7]))?/g))) {\n    console.log(set, count);\n\n    // Process the set and count as needed\n  }\n  return true; // or your actual logic\n}\nconsole.log(checkPieces(\"TIJ\", \"[TIJL]p3\")); // true\nconsole.log(checkPieces(\"TZL\", \"[TIJL]p3\")); // false\nconsole.log(checkPieces(\"TILZ\", \"[TIJL]p3[ZS]p1\")); // true\nconsole.log(checkPieces(\"TZL\", \"[TIJL]p3[ZS]p1\")); // false\n\n/*// Main method to check if a queue belongs to a set\r\n  export default function pieces(queue: string, set: string): boolean {\r\n    console.log(`Queue: ${queue}, Set: ${set}`);\r\n    var [pieces, modifiers] = set.split('{');\r\n    if(modifiers?.endsWith('}'))modifiers = modifiers.slice(0, modifiers.length - 1);\r\n    console.log(`Pieces: ${pieces}, Modifiers: ${modifiers}`);\r\n    \r\n    const queuePieces = pieces.trim();\r\n    return true;\r\n  }\r\n  \r\n  \r\n  \r\n  console.log(pieces(\"IJLS\", \"[IJLS]!{S<3}\"));\r\n  */\nexport default checkPieces;","map":{"version":3,"names":["checkPieces","queue","pieces","replaceAll","_","set","count","Array","from","matchAll","console","log"],"sources":["C:/Stuff/Github/peasea/src/scripts/pieces.tsx"],"sourcesContent":["function checkPieces(queue: string, pieces: string): boolean {\r\n    // Parse the pieces string to get the sets and their counts\r\n    pieces = pieces.replaceAll(\"*\", \"[TIJLOSZ]\");\r\n\r\n    // Iterate through the matches\r\n    for (const [_, set, count = 1] of Array.from(\r\n        pieces.matchAll(/\\[(\\^?[TIJLOSZ]{0,7})\\](?=p([0-7]))?/g)\r\n    )) {\r\n        console.log(set, count);\r\n\r\n        // Process the set and count as needed\r\n    }\r\n\r\n    return true; // or your actual logic\r\n}\r\n\r\nconsole.log(checkPieces(\"TIJ\", \"[TIJL]p3\")); // true\r\nconsole.log(checkPieces(\"TZL\", \"[TIJL]p3\")); // false\r\nconsole.log(checkPieces(\"TILZ\", \"[TIJL]p3[ZS]p1\")); // true\r\nconsole.log(checkPieces(\"TZL\", \"[TIJL]p3[ZS]p1\")); // false\r\n\r\n/*// Main method to check if a queue belongs to a set\r\n  export default function pieces(queue: string, set: string): boolean {\r\n    console.log(`Queue: ${queue}, Set: ${set}`);\r\n    var [pieces, modifiers] = set.split('{');\r\n    if(modifiers?.endsWith('}'))modifiers = modifiers.slice(0, modifiers.length - 1);\r\n    console.log(`Pieces: ${pieces}, Modifiers: ${modifiers}`);\r\n    \r\n    const queuePieces = pieces.trim();\r\n    return true;\r\n  }\r\n  \r\n  \r\n  \r\n  console.log(pieces(\"IJLS\", \"[IJLS]!{S<3}\"));\r\n  */\r\nexport default checkPieces;"],"mappings":"AAAA,SAASA,WAAWA,CAACC,KAAa,EAAEC,MAAc,EAAW;EACzD;EACAA,MAAM,GAAGA,MAAM,CAACC,UAAU,CAAC,GAAG,EAAE,WAAW,CAAC;;EAE5C;EACA,KAAK,MAAM,CAACC,CAAC,EAAEC,GAAG,EAAEC,KAAK,GAAG,CAAC,CAAC,IAAIC,KAAK,CAACC,IAAI,CACxCN,MAAM,CAACO,QAAQ,CAAC,uCAAuC,CAC3D,CAAC,EAAE;IACCC,OAAO,CAACC,GAAG,CAACN,GAAG,EAAEC,KAAK,CAAC;;IAEvB;EACJ;EAEA,OAAO,IAAI,CAAC,CAAC;AACjB;AAEAI,OAAO,CAACC,GAAG,CAACX,WAAW,CAAC,KAAK,EAAE,UAAU,CAAC,CAAC,CAAC,CAAC;AAC7CU,OAAO,CAACC,GAAG,CAACX,WAAW,CAAC,KAAK,EAAE,UAAU,CAAC,CAAC,CAAC,CAAC;AAC7CU,OAAO,CAACC,GAAG,CAACX,WAAW,CAAC,MAAM,EAAE,gBAAgB,CAAC,CAAC,CAAC,CAAC;AACpDU,OAAO,CAACC,GAAG,CAACX,WAAW,CAAC,KAAK,EAAE,gBAAgB,CAAC,CAAC,CAAC,CAAC;;AAEnD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAeA,WAAW","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}