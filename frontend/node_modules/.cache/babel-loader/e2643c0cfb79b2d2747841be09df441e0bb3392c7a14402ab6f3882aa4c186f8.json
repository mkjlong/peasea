{"ast":null,"code":"var _PCGroup;\nimport { PC } from \"./PC\";\nimport { normalizedSort, pieces } from \"./pieces\";\nimport Setup from \"./Setup\";\nexport class PCGroup {\n  constructor(queue, pc) {\n    this.queue = void 0;\n    this.normalizedQueue = void 0;\n    this.pc = void 0;\n    this.queue = queue;\n    this.normalizedQueue = normalizedSort(queue);\n    this.pc = pc;\n  }\n  getQueue() {\n    return this.queue;\n  }\n  getNormalizedQueue() {\n    return this.normalizedQueue;\n  }\n  getPC() {\n    return this.pc;\n  }\n  static validateQueue(queue) {\n    const seen = new Set();\n    for (const char of queue) {\n      if (seen.has(char)) return false;\n      seen.add(char);\n    }\n    return true;\n  }\n  static from(queue) {\n    const normalizedQueue = normalizedSort(queue);\n    for (const {\n      pc,\n      matcher\n    } of this.groupRegistry) {\n      if (matcher(normalizedQueue)) {\n        return new PCGroup(queue, pc);\n      }\n    }\n    return null;\n  }\n  calculateCoverage() {\n    const permutations = pieces(\"[\".concat(this.getQueue(), \"]!p3\")); // Generate all permutations for the PCGroup\n    let matchingCount = 0;\n    for (const permutation of permutations) {\n      for (const setup of Setup.testSetups) {\n        var _setup$getSuccess;\n        if ((_setup$getSuccess = setup.getSuccess()) !== null && _setup$getSuccess !== void 0 && _setup$getSuccess.has(permutation)) {\n          matchingCount++;\n          break; // Stop checking other setups for this permutation\n        }\n      }\n    }\n    return matchingCount / permutations.size * 100; // Return progress as a percentage\n  }\n}\n_PCGroup = PCGroup;\nPCGroup.groupRegistry = [{\n  pc: PC.FIRST,\n  matcher: queue => queue.length === 7 && _PCGroup.validateQueue(queue)\n}, {\n  pc: PC.SECOND,\n  matcher: queue => queue.length === 4 && _PCGroup.validateQueue(queue)\n}, {\n  pc: PC.THIRD,\n  matcher: queue => queue.length === 1 && _PCGroup.validateQueue(queue)\n}, {\n  pc: PC.FOURTH,\n  matcher: queue => queue.length === 5 && _PCGroup.validateQueue(queue)\n}, {\n  pc: PC.FIFTH,\n  matcher: queue => queue.length === 2 && _PCGroup.validateQueue(queue)\n}, {\n  pc: PC.SIXTH,\n  matcher: queue => queue.length === 6 && _PCGroup.validateQueue(queue)\n}, {\n  pc: PC.SEVENTH,\n  matcher: queue => queue.length === 3 && _PCGroup.validateQueue(queue)\n}];","map":{"version":3,"names":["PC","normalizedSort","pieces","Setup","PCGroup","constructor","queue","pc","normalizedQueue","getQueue","getNormalizedQueue","getPC","validateQueue","seen","Set","char","has","add","from","matcher","groupRegistry","calculateCoverage","permutations","concat","matchingCount","permutation","setup","testSetups","_setup$getSuccess","getSuccess","size","_PCGroup","FIRST","length","SECOND","THIRD","FOURTH","FIFTH","SIXTH","SEVENTH"],"sources":["C:/Stuff/Github/peasea/frontend/src/scripts/PCGroup.ts"],"sourcesContent":["import { PC } from \"./PC\";\r\nimport { normalizedSort, pieces } from \"./pieces\";\r\nimport Setup from \"./Setup\";\r\n\r\ntype GroupMatcher = (queue: string) => boolean;\r\n\r\nexport class PCGroup {\r\n    private static groupRegistry: { pc: PC; matcher: GroupMatcher }[] = [\r\n        { pc: PC.FIRST, matcher: (queue) => queue.length === 7 && PCGroup.validateQueue(queue) },\r\n        { pc: PC.SECOND, matcher: (queue) => queue.length === 4 && PCGroup.validateQueue(queue) },\r\n        { pc: PC.THIRD, matcher: (queue) => queue.length === 1 && PCGroup.validateQueue(queue) },\r\n        { pc: PC.FOURTH, matcher: (queue) => queue.length === 5 && PCGroup.validateQueue(queue) },\r\n        { pc: PC.FIFTH, matcher: (queue) => queue.length === 2 && PCGroup.validateQueue(queue) },\r\n        { pc: PC.SIXTH, matcher: (queue) => queue.length === 6 && PCGroup.validateQueue(queue) },\r\n        { pc: PC.SEVENTH, matcher: (queue) => queue.length === 3 && PCGroup.validateQueue(queue) },\r\n    ];\r\n\r\n    private queue: string;\r\n    private normalizedQueue: string;\r\n    private pc: PC;\r\n\r\n    constructor(queue: string, pc: PC) {\r\n        this.queue = queue;\r\n        this.normalizedQueue = normalizedSort(queue);\r\n        this.pc = pc;\r\n    }\r\n\r\n    public getQueue(): string {\r\n        return this.queue;\r\n    }\r\n\r\n    public getNormalizedQueue(): string {\r\n        return this.normalizedQueue;\r\n    }\r\n\r\n    public getPC(): PC {\r\n        return this.pc;\r\n    }\r\n\r\n    private static validateQueue(queue: string): boolean {\r\n        const seen = new Set<string>();\r\n        for (const char of queue) {\r\n            if (seen.has(char)) return false;\r\n            seen.add(char);\r\n        }\r\n        return true;\r\n    }\r\n\r\n    static from(queue: string): PCGroup | null {\r\n        const normalizedQueue = normalizedSort(queue);\r\n        for (const { pc, matcher } of this.groupRegistry) {\r\n            if (matcher(normalizedQueue)) {\r\n                return new PCGroup(queue, pc);\r\n            }\r\n        }\r\n        return null;\r\n    }\r\n\r\n    public calculateCoverage(): number {\r\n        const permutations = pieces(`[${this.getQueue()}]!p3`); // Generate all permutations for the PCGroup\r\n        let matchingCount = 0;\r\n\r\n        for (const permutation of permutations) {\r\n            for (const setup of Setup.testSetups) {\r\n                if (setup.getSuccess()?.has(permutation)) {\r\n                    matchingCount++;\r\n                    break; // Stop checking other setups for this permutation\r\n                }\r\n            }\r\n        }\r\n\r\n        return (matchingCount / permutations.size) * 100; // Return progress as a percentage\r\n    }\r\n}\r\n\r\n\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}