{"ast":null,"code":"class Tetrimino {\n  static get J() {\n    return new Tetrimino(\"J\");\n  }\n  static get T() {\n    return new Tetrimino(\"T\");\n  }\n  static get S() {\n    return new Tetrimino(\"S\");\n  }\n  static get L() {\n    return new Tetrimino(\"L\");\n  }\n  static get I() {\n    return new Tetrimino(\"I\");\n  }\n  static get Z() {\n    return new Tetrimino(\"Z\");\n  }\n  static get O() {\n    return new Tetrimino(\"O\");\n  }\n  static from(queue) {\n    const tetriminos = [];\n    for (let char of queue) {\n      if (char === 'J' || char === 'T' || char === 'S' || char === 'L' || char === 'I' || char === 'Z' || char === 'O') {\n        tetriminos.push(new Tetrimino(char));\n      }\n    }\n    return tetriminos;\n  }\n  constructor(tetrimino) {\n    this.tetrimino = void 0;\n    this.tetrimino = tetrimino;\n  }\n  toString() {\n    return this.tetrimino;\n  }\n  get index() {\n    return \"JTLSIZO\".indexOf(this.tetrimino);\n  }\n}\nexport default Tetrimino;\nexport const J = Tetrimino.J;\nexport const T = Tetrimino.T;\nexport const S = Tetrimino.S;\nexport const L = Tetrimino.L;\nexport const I = Tetrimino.I;\nexport const Z = Tetrimino.Z;\nexport const O = Tetrimino.O;\nexport const tetrimino = arg => {\n  if (typeof arg === \"string\") {\n    switch (arg.toUpperCase()) {\n      case \"J\":\n        return Tetrimino.J;\n      case \"T\":\n        return Tetrimino.T;\n      case \"S\":\n        return Tetrimino.S;\n      case \"L\":\n        return Tetrimino.L;\n      case \"I\":\n        return Tetrimino.I;\n      case \"Z\":\n        return Tetrimino.Z;\n      case \"O\":\n        return Tetrimino.O;\n      default:\n        throw new Error(\"Invalid tetrimino string\");\n    }\n  } else if (typeof arg === \"number\") {\n    const tetriminos = [J, T, S, L, I, Z, O];\n    if (arg < 0 || arg >= tetriminos.length) {\n      throw new Error(\"Invalid tetrimino index\");\n    }\n    return new Tetrimino(tetriminos[arg]);\n  } else {\n    throw new Error(\"Invalid argument type\");\n  }\n};","map":{"version":3,"names":["Tetrimino","J","T","S","L","I","Z","O","from","queue","tetriminos","char","push","constructor","tetrimino","toString","index","indexOf","arg","toUpperCase","Error","length"],"sources":["C:/Stuff/Github/peasea/frontend/src/scripts/Tetrimino.ts"],"sourcesContent":["class Tetrimino{\r\n    private tetrimino;\r\n\r\n    public static get J() : Tetrimino {return new Tetrimino(\"J\")};\r\n    public static get T() : Tetrimino {return new Tetrimino(\"T\")};\r\n    public static get S() : Tetrimino {return new Tetrimino(\"S\")};\r\n    public static get L() : Tetrimino {return new Tetrimino(\"L\")};\r\n    public static get I() : Tetrimino {return new Tetrimino(\"I\")};\r\n    public static get Z() : Tetrimino {return new Tetrimino(\"Z\")};\r\n    public static get O() : Tetrimino {return new Tetrimino(\"O\")};\r\n    public static from(queue:string):Tetrimino[]{\r\n        const tetriminos: Tetrimino[] = [];\r\n        for(let char of queue){\r\n            if(char === 'J' || char === 'T' || char === 'S' || char === 'L' || char === 'I' || char === 'Z' || char === 'O'){\r\n                tetriminos.push(new Tetrimino(char));\r\n            }\r\n        }\r\n        return tetriminos;\r\n    }\r\n    constructor(tetrimino:\"J\"|\"T\"|\"L\"|\"S\"|\"I\"|\"Z\"|\"O\"){\r\n        this.tetrimino = tetrimino;\r\n    }\r\n\r\n    public toString(): string {\r\n        return this.tetrimino;\r\n    }\r\n\r\n    get index(): number {\r\n        return \"JTLSIZO\".indexOf(this.tetrimino);\r\n    }\r\n}\r\n\r\nexport default Tetrimino;\r\nexport const J = Tetrimino.J;\r\nexport const T = Tetrimino.T;\r\nexport const S = Tetrimino.S;\r\nexport const L = Tetrimino.L;\r\nexport const I = Tetrimino.I;\r\nexport const Z = Tetrimino.Z;\r\nexport const O = Tetrimino.O;\r\nexport const tetrimino = (arg: string|number):Tetrimino => {\r\n    if (typeof arg === \"string\") {\r\n        switch (arg.toUpperCase()) {\r\n            case \"J\":\r\n                return Tetrimino.J;\r\n            case \"T\":\r\n                return Tetrimino.T;\r\n            case \"S\":\r\n                return Tetrimino.S;\r\n            case \"L\":\r\n                return Tetrimino.L;\r\n            case \"I\":\r\n                return Tetrimino.I;\r\n            case \"Z\":\r\n                return Tetrimino.Z;\r\n            case \"O\":\r\n                return Tetrimino.O;\r\n            default:\r\n                throw new Error(\"Invalid tetrimino string\");\r\n        }\r\n    } else if (typeof arg === \"number\") {\r\n        const tetriminos = [J,T,S,L,I,Z,O];\r\n        if (arg < 0 || arg >= tetriminos.length) {\r\n            throw new Error(\"Invalid tetrimino index\");\r\n        }\r\n        return new Tetrimino(tetriminos[arg] as any);\r\n    } else {\r\n        throw new Error(\"Invalid argument type\");\r\n    }\r\n}"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}