{"ast":null,"code":"export default async function getFumenFromReplay(replayUrl) {\n  // Check if the URL is a valid Jstris replay URL\n  const target = \"jstris.jezevec10.com\";\n  if (!replayUrl.includes(target)) {\n    throw new Error(\"Invalid replay URL. It must be from jstris.jezevec10.com.\");\n  }\n  const parts = replayUrl.split(\"/\");\n  if (parts.length < 5 || parts[3] !== \"replay\") {\n    throw new Error(\"Invalid replay URL format.\");\n  }\n\n  // Extract replay ID\n  const id = parts[4];\n\n  // Fetch replay data using CORS proxy\n  const proxyUrl = \"https://cors-anywhere.herokuapp.com/https://jstris.jezevec10.com/replay/data?id=\".concat(id, \"&type=0\");\n  console.log(proxyUrl);\n  fetch(\"https://api.allorigins.win/get?url=\".concat(encodeURIComponent(\"https://jstris.jezevec10.com/replay/data?id=\".concat(id, \"&type=0\")))).then(response => {\n    if (response.ok) return response.json();\n    throw new Error('Network response was not ok.');\n  }).then(data => console.log(data.contents));\n  return null;\n  /*\r\n  \r\n  try {\r\n    const replayResponse = await fetch(proxyUrl);\r\n    if (!replayResponse.ok) {\r\n      throw new Error(\"Failed to fetch replay data.\");\r\n    }\r\n      const replayData = await replayResponse.text();\r\n      // Compress the replay data for Fumen API compatibility\r\n    const compressedReplay = compressToEncodedURIComponent(replayData);\r\n      // Send the compressed replay to the Fumen API\r\n    const fumenResponse = await fetch(`https://fumen.tstman.net/jstris`, {\r\n      method: \"POST\",\r\n      headers: {\r\n        Accept: \"application/json\",\r\n        \"Content-Type\": \"application/json\",\r\n      },\r\n      body: JSON.stringify({ replay: compressedReplay }),\r\n    });\r\n      if (!fumenResponse.ok) {\r\n      throw new Error(\"Failed to convert replay to Fumen.\");\r\n    }\r\n      const fumenData = await fumenResponse.json();\r\n      // Return the Fumen string\r\n    return fumenData.fumen;\r\n  } catch (error) {\r\n    console.error(\"Error processing replay:\", error);\r\n    return null;\r\n  }\r\n    */\n}","map":{"version":3,"names":["getFumenFromReplay","replayUrl","target","includes","Error","parts","split","length","id","proxyUrl","concat","console","log","fetch","encodeURIComponent","then","response","ok","json","data","contents"],"sources":["C:/Stuff/Github/peasea/src/scripts/upload.tsx"],"sourcesContent":["import { compressToEncodedURIComponent } from \"lz-string\";\r\n\r\nexport default async function getFumenFromReplay(replayUrl: string): Promise<string | null> {\r\n  // Check if the URL is a valid Jstris replay URL\r\n  const target = \"jstris.jezevec10.com\";\r\n  if (!replayUrl.includes(target)) {\r\n    throw new Error(\"Invalid replay URL. It must be from jstris.jezevec10.com.\");\r\n  }\r\n\r\n  const parts = replayUrl.split(\"/\");\r\n  if (parts.length < 5 || parts[3] !== \"replay\") {\r\n    throw new Error(\"Invalid replay URL format.\");\r\n  }\r\n\r\n  // Extract replay ID\r\n  const id = parts[4];\r\n\r\n  // Fetch replay data using CORS proxy\r\n  const proxyUrl = `https://cors-anywhere.herokuapp.com/https://jstris.jezevec10.com/replay/data?id=${id}&type=0`;\r\n\r\n  console.log(proxyUrl);\r\n\r\n  fetch(`https://api.allorigins.win/get?url=${encodeURIComponent(`https://jstris.jezevec10.com/replay/data?id=${id}&type=0`)}`)\r\n                    .then(response => {\r\n                      if (response.ok) return response.json()\r\n                      throw new Error('Network response was not ok.')\r\n                    })\r\n                    .then(data => console.log(data.contents));\r\n  return null;\r\n  /*\r\n  \r\n  try {\r\n    const replayResponse = await fetch(proxyUrl);\r\n    if (!replayResponse.ok) {\r\n      throw new Error(\"Failed to fetch replay data.\");\r\n    }\r\n\r\n    const replayData = await replayResponse.text();\r\n\r\n    // Compress the replay data for Fumen API compatibility\r\n    const compressedReplay = compressToEncodedURIComponent(replayData);\r\n\r\n    // Send the compressed replay to the Fumen API\r\n    const fumenResponse = await fetch(`https://fumen.tstman.net/jstris`, {\r\n      method: \"POST\",\r\n      headers: {\r\n        Accept: \"application/json\",\r\n        \"Content-Type\": \"application/json\",\r\n      },\r\n      body: JSON.stringify({ replay: compressedReplay }),\r\n    });\r\n\r\n    if (!fumenResponse.ok) {\r\n      throw new Error(\"Failed to convert replay to Fumen.\");\r\n    }\r\n\r\n    const fumenData = await fumenResponse.json();\r\n\r\n    // Return the Fumen string\r\n    return fumenData.fumen;\r\n  } catch (error) {\r\n    console.error(\"Error processing replay:\", error);\r\n    return null;\r\n  }\r\n    */\r\n}"],"mappings":"AAEA,eAAe,eAAeA,kBAAkBA,CAACC,SAAiB,EAA0B;EAC1F;EACA,MAAMC,MAAM,GAAG,sBAAsB;EACrC,IAAI,CAACD,SAAS,CAACE,QAAQ,CAACD,MAAM,CAAC,EAAE;IAC/B,MAAM,IAAIE,KAAK,CAAC,2DAA2D,CAAC;EAC9E;EAEA,MAAMC,KAAK,GAAGJ,SAAS,CAACK,KAAK,CAAC,GAAG,CAAC;EAClC,IAAID,KAAK,CAACE,MAAM,GAAG,CAAC,IAAIF,KAAK,CAAC,CAAC,CAAC,KAAK,QAAQ,EAAE;IAC7C,MAAM,IAAID,KAAK,CAAC,4BAA4B,CAAC;EAC/C;;EAEA;EACA,MAAMI,EAAE,GAAGH,KAAK,CAAC,CAAC,CAAC;;EAEnB;EACA,MAAMI,QAAQ,sFAAAC,MAAA,CAAsFF,EAAE,YAAS;EAE/GG,OAAO,CAACC,GAAG,CAACH,QAAQ,CAAC;EAErBI,KAAK,uCAAAH,MAAA,CAAuCI,kBAAkB,gDAAAJ,MAAA,CAAgDF,EAAE,YAAS,CAAC,CAAE,CAAC,CAC1GO,IAAI,CAACC,QAAQ,IAAI;IAChB,IAAIA,QAAQ,CAACC,EAAE,EAAE,OAAOD,QAAQ,CAACE,IAAI,CAAC,CAAC;IACvC,MAAM,IAAId,KAAK,CAAC,8BAA8B,CAAC;EACjD,CAAC,CAAC,CACDW,IAAI,CAACI,IAAI,IAAIR,OAAO,CAACC,GAAG,CAACO,IAAI,CAACC,QAAQ,CAAC,CAAC;EAC3D,OAAO,IAAI;EACX;AACF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAOA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}