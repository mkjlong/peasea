{"ast":null,"code":"var _jsxFileName = \"C:\\\\Stuff\\\\Github\\\\peasea\\\\frontend\\\\src\\\\pages\\\\MethodPage\\\\MethodPage.tsx\",\n  _s = $RefreshSig$();\nimport { useParams } from \"react-router-dom\";\nimport classes from \"./MethodPage.module.css\";\nimport { useEffect } from \"react\";\nimport { useSidebar } from \"../../contexts/SidebarContext\";\nimport { useNavbar } from \"../../contexts/NavContext\";\nimport MethodChooser from \"../../components/MethodChooser/MethodChooser\";\nimport SetupPreview from \"../../components/SetupPreview/SetupPreview\";\nimport Setup from \"../../scripts/Setup\";\nimport { PCGroup } from \"../../scripts/PCGroup\";\nimport { jsxDEV as _jsxDEV, Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nconst testSetups = Setup.testSetups;\nconst MethodPage = () => {\n  _s();\n  const {\n    setSidebar\n  } = useSidebar();\n  const {\n    setNavbar\n  } = useNavbar();\n  const {\n    queue\n  } = useParams();\n  const pcGroup = new PCGroup(queue !== null && queue !== void 0 ? queue : \"\");\n  const pc = pcGroup.getPC();\n  console.log(\"\".concat(pc, \", \").concat(pcGroup));\n  useEffect(() => {\n    setSidebar(\"\".concat(pcGroup, \" Methods\"), /*#__PURE__*/_jsxDEV(MethodChooser, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 30,\n      columnNumber: 42\n    }, this));\n    setNavbar(/*#__PURE__*/_jsxDEV(_Fragment, {\n      children: [/*#__PURE__*/_jsxDEV(\"a\", {\n        className: classes.link,\n        href: \"../\".concat(pc.getIter()),\n        children: \"\".concat(pc)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 33,\n        columnNumber: 17\n      }, this), \" \\u2022 \", pcGroup]\n    }, void 0, true), /*#__PURE__*/_jsxDEV(_Fragment, {}, void 0, false));\n  }, []);\n\n  // Filter setups that match this PCGroup queue\n  const matchingSetups = testSetups.filter(setup => setup.getPCGroup().toString() === normalizedQueue);\n\n  // Update logic to use PCGroup\n  const matchingMethods = testSetups.filter(setup => setup.getPCGroup().toString() === (pcGroup === null || pcGroup === void 0 ? void 0 : pcGroup.toString()));\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: classes.methodPage,\n    children: /*#__PURE__*/_jsxDEV(\"div\", {\n      className: classes.setupList,\n      children: matchingSetups.map((setup, idx) => /*#__PURE__*/_jsxDEV(SetupPreview, {\n        setup: setup\n      }, idx, false, {\n        fileName: _jsxFileName,\n        lineNumber: 53,\n        columnNumber: 21\n      }, this))\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 51,\n      columnNumber: 13\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 50,\n    columnNumber: 9\n  }, this);\n};\n_s(MethodPage, \"Jfs+k5XGlUvZVLnXQPdj8GOP9cg=\", false, function () {\n  return [useSidebar, useNavbar, useParams];\n});\n_c = MethodPage;\nexport default MethodPage;\nvar _c;\n$RefreshReg$(_c, \"MethodPage\");","map":{"version":3,"names":["useParams","classes","useEffect","useSidebar","useNavbar","MethodChooser","SetupPreview","Setup","PCGroup","jsxDEV","_jsxDEV","Fragment","_Fragment","testSetups","MethodPage","_s","setSidebar","setNavbar","queue","pcGroup","pc","getPC","console","log","concat","fileName","_jsxFileName","lineNumber","columnNumber","children","className","link","href","getIter","matchingSetups","filter","setup","getPCGroup","toString","normalizedQueue","matchingMethods","methodPage","setupList","map","idx","_c","$RefreshReg$"],"sources":["C:/Stuff/Github/peasea/frontend/src/pages/MethodPage/MethodPage.tsx"],"sourcesContent":["import { useParams } from \"react-router-dom\";\r\nimport classes from \"./MethodPage.module.css\";\r\nimport { useEffect } from \"react\";\r\nimport { useSidebar } from \"../../contexts/SidebarContext\";\r\nimport { useNavbar } from \"../../contexts/NavContext\";\r\nimport SetChooser from \"../../components/SetChooser/SetChooser\";\r\nimport MethodChooser from \"../../components/MethodChooser/MethodChooser\";\r\nimport SetupPreview from \"../../components/SetupPreview/SetupPreview\";\r\nimport { PC } from \"../../scripts/PC\";\r\nimport Setup from \"../../scripts/Setup\";\r\nimport { PCGroup } from \"../../scripts/PCGroup\";\r\nimport { normalizedSort } from \"../../scripts/pieces\";\r\n\r\ninterface MethodPage {\r\n}\r\n\r\nconst testSetups = Setup.testSetups;\r\nconst MethodPage = () => {\r\n    const { setSidebar } = useSidebar();\r\n    const { setNavbar } = useNavbar();\r\n    const { queue } = useParams();\r\n\r\n    const pcGroup = new PCGroup(queue??\"\");\r\n    const pc = pcGroup.getPC();\r\n\r\n    console.log(`${pc}, ${pcGroup}`);\r\n    \r\n\r\n    useEffect(() => {\r\n        setSidebar(`${pcGroup} Methods`, <MethodChooser />);\r\n        setNavbar(\r\n            <>\r\n                <a className={classes.link} href={`../${pc.getIter()}`}>{`${pc}`}</a> â€¢ {pcGroup}\r\n            </>,\r\n            <></>\r\n        );\r\n    }, []);\r\n\r\n    // Filter setups that match this PCGroup queue\r\n    const matchingSetups = testSetups.filter(setup =>\r\n        setup.getPCGroup().toString() === normalizedQueue\r\n    );\r\n\r\n    // Update logic to use PCGroup\r\n    const matchingMethods = testSetups.filter(setup =>\r\n        setup.getPCGroup().toString() === pcGroup?.toString()\r\n    );\r\n\r\n    return (\r\n        <div className={classes.methodPage}>\r\n            <div className={classes.setupList}>\r\n                {matchingSetups.map((setup, idx) => (\r\n                    <SetupPreview key={idx} setup={setup} />\r\n                ))}\r\n            </div>\r\n        </div>\r\n    );\r\n};\r\nexport default MethodPage"],"mappings":";;AAAA,SAASA,SAAS,QAAQ,kBAAkB;AAC5C,OAAOC,OAAO,MAAM,yBAAyB;AAC7C,SAASC,SAAS,QAAQ,OAAO;AACjC,SAASC,UAAU,QAAQ,+BAA+B;AAC1D,SAASC,SAAS,QAAQ,2BAA2B;AAErD,OAAOC,aAAa,MAAM,8CAA8C;AACxE,OAAOC,YAAY,MAAM,4CAA4C;AAErE,OAAOC,KAAK,MAAM,qBAAqB;AACvC,SAASC,OAAO,QAAQ,uBAAuB;AAAC,SAAAC,MAAA,IAAAC,OAAA,EAAAC,QAAA,IAAAC,SAAA;AAMhD,MAAMC,UAAU,GAAGN,KAAK,CAACM,UAAU;AACnC,MAAMC,UAAU,GAAGA,CAAA,KAAM;EAAAC,EAAA;EACrB,MAAM;IAAEC;EAAW,CAAC,GAAGb,UAAU,CAAC,CAAC;EACnC,MAAM;IAAEc;EAAU,CAAC,GAAGb,SAAS,CAAC,CAAC;EACjC,MAAM;IAAEc;EAAM,CAAC,GAAGlB,SAAS,CAAC,CAAC;EAE7B,MAAMmB,OAAO,GAAG,IAAIX,OAAO,CAACU,KAAK,aAALA,KAAK,cAALA,KAAK,GAAE,EAAE,CAAC;EACtC,MAAME,EAAE,GAAGD,OAAO,CAACE,KAAK,CAAC,CAAC;EAE1BC,OAAO,CAACC,GAAG,IAAAC,MAAA,CAAIJ,EAAE,QAAAI,MAAA,CAAKL,OAAO,CAAE,CAAC;EAGhCjB,SAAS,CAAC,MAAM;IACZc,UAAU,IAAAQ,MAAA,CAAIL,OAAO,4BAAYT,OAAA,CAACL,aAAa;MAAAoB,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAE,CAAC,CAAC;IACnDX,SAAS,cACLP,OAAA,CAAAE,SAAA;MAAAiB,QAAA,gBACInB,OAAA;QAAGoB,SAAS,EAAE7B,OAAO,CAAC8B,IAAK;QAACC,IAAI,QAAAR,MAAA,CAAQJ,EAAE,CAACa,OAAO,CAAC,CAAC,CAAG;QAAAJ,QAAA,KAAAL,MAAA,CAAKJ,EAAE;MAAA;QAAAK,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAM,CAAC,YAAG,EAACT,OAAO;IAAA,eAClF,CAAC,eACHT,OAAA,CAAAE,SAAA,mBAAI,CACR,CAAC;EACL,CAAC,EAAE,EAAE,CAAC;;EAEN;EACA,MAAMsB,cAAc,GAAGrB,UAAU,CAACsB,MAAM,CAACC,KAAK,IAC1CA,KAAK,CAACC,UAAU,CAAC,CAAC,CAACC,QAAQ,CAAC,CAAC,KAAKC,eACtC,CAAC;;EAED;EACA,MAAMC,eAAe,GAAG3B,UAAU,CAACsB,MAAM,CAACC,KAAK,IAC3CA,KAAK,CAACC,UAAU,CAAC,CAAC,CAACC,QAAQ,CAAC,CAAC,MAAKnB,OAAO,aAAPA,OAAO,uBAAPA,OAAO,CAAEmB,QAAQ,CAAC,CAAC,CACzD,CAAC;EAED,oBACI5B,OAAA;IAAKoB,SAAS,EAAE7B,OAAO,CAACwC,UAAW;IAAAZ,QAAA,eAC/BnB,OAAA;MAAKoB,SAAS,EAAE7B,OAAO,CAACyC,SAAU;MAAAb,QAAA,EAC7BK,cAAc,CAACS,GAAG,CAAC,CAACP,KAAK,EAAEQ,GAAG,kBAC3BlC,OAAA,CAACJ,YAAY;QAAW8B,KAAK,EAAEA;MAAM,GAAlBQ,GAAG;QAAAnB,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAiB,CAC1C;IAAC;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OACD;EAAC;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACL,CAAC;AAEd,CAAC;AAACb,EAAA,CAxCID,UAAU;EAAA,QACWX,UAAU,EACXC,SAAS,EACbJ,SAAS;AAAA;AAAA6C,EAAA,GAHzB/B,UAAU;AAyChB,eAAeA,UAAU;AAAA,IAAA+B,EAAA;AAAAC,YAAA,CAAAD,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}