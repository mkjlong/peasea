{"ast":null,"code":"var _jsxFileName = \"C:\\\\Stuff\\\\Github\\\\peasea\\\\frontend\\\\src\\\\pages\\\\MethodPage\\\\MethodPage.tsx\",\n  _s = $RefreshSig$();\nimport { useParams } from \"react-router-dom\";\nimport classes from \"./MethodPage.module.css\";\nimport { useEffect } from \"react\";\nimport { useSidebar } from \"../../contexts/SidebarContext\";\nimport { useNavbar } from \"../../contexts/NavContext\";\nimport MethodChooser from \"../../components/MethodChooser/MethodChooser\";\nimport SetupPreview from \"../../components/SetupPreview/SetupPreview\";\nimport Setup from \"../../scripts/Setup\";\nimport { PCGroup } from \"../../scripts/PCGroup\";\nimport { jsxDEV as _jsxDEV, Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nconst testSetups = Setup.testSetups;\nconst MethodPage = () => {\n  _s();\n  const {\n    setSidebar\n  } = useSidebar();\n  const {\n    setNavbar\n  } = useNavbar();\n  const {\n    queue\n  } = useParams();\n  const pcGroup = new PCGroup(queue !== null && queue !== void 0 ? queue : \"\");\n  const pc = pcGroup.getPC();\n  useEffect(() => {\n    setSidebar(\"\".concat(pcGroup, \" Methods\"), /*#__PURE__*/_jsxDEV(MethodChooser, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 26,\n      columnNumber: 42\n    }, this));\n    setNavbar(/*#__PURE__*/_jsxDEV(_Fragment, {\n      children: [/*#__PURE__*/_jsxDEV(\"a\", {\n        className: classes.link,\n        href: \"../\".concat(pc.getIter()),\n        children: \"\".concat(pc)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 29,\n        columnNumber: 17\n      }, this), \" \", \"\\u2022 \", pcGroup.toString()]\n    }, void 0, true), /*#__PURE__*/_jsxDEV(_Fragment, {}, void 0, false));\n  }, []);\n\n  // Filter setups that match this PCGroup queue\n  const matchingSetups = testSetups.filter(setup => {\n    console.log(typeof setup.getPCGroup().code);\n    console.log(typeof pcGroup.code);\n    console.log(setup.getPCGroup().equals(pcGroup));\n    return setup.getPCGroup().equals(pcGroup);\n  });\n  console.log(matchingSetups);\n\n  // Update logic to use PCGroup\n  const matchingMethods = testSetups.filter(setup => setup.getPCGroup().equals(pcGroup));\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: classes.methodPage,\n    children: /*#__PURE__*/_jsxDEV(\"div\", {\n      className: classes.setupList,\n      children: matchingSetups.map((setup, idx) => /*#__PURE__*/_jsxDEV(SetupPreview, {\n        setup: setup\n      }, idx, false, {\n        fileName: _jsxFileName,\n        lineNumber: 61,\n        columnNumber: 21\n      }, this))\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 59,\n      columnNumber: 13\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 58,\n    columnNumber: 9\n  }, this);\n};\n_s(MethodPage, \"Jfs+k5XGlUvZVLnXQPdj8GOP9cg=\", false, function () {\n  return [useSidebar, useNavbar, useParams];\n});\n_c = MethodPage;\nexport default MethodPage;\nvar _c;\n$RefreshReg$(_c, \"MethodPage\");","map":{"version":3,"names":["useParams","classes","useEffect","useSidebar","useNavbar","MethodChooser","SetupPreview","Setup","PCGroup","jsxDEV","_jsxDEV","Fragment","_Fragment","testSetups","MethodPage","_s","setSidebar","setNavbar","queue","pcGroup","pc","getPC","concat","fileName","_jsxFileName","lineNumber","columnNumber","children","className","link","href","getIter","toString","matchingSetups","filter","setup","console","log","getPCGroup","code","equals","matchingMethods","methodPage","setupList","map","idx","_c","$RefreshReg$"],"sources":["C:/Stuff/Github/peasea/frontend/src/pages/MethodPage/MethodPage.tsx"],"sourcesContent":["import { useParams } from \"react-router-dom\";\r\nimport classes from \"./MethodPage.module.css\";\r\nimport { useEffect } from \"react\";\r\nimport { useSidebar } from \"../../contexts/SidebarContext\";\r\nimport { useNavbar } from \"../../contexts/NavContext\";\r\nimport SetChooser from \"../../components/SetChooser/SetChooser\";\r\nimport MethodChooser from \"../../components/MethodChooser/MethodChooser\";\r\nimport SetupPreview from \"../../components/SetupPreview/SetupPreview\";\r\nimport { PC } from \"../../scripts/PC\";\r\nimport Setup from \"../../scripts/Setup\";\r\nimport { PCGroup } from \"../../scripts/PCGroup\";\r\nimport { normalizedSort } from \"../../scripts/pieces\";\r\n\r\ninterface MethodPage {}\r\n\r\nconst testSetups = Setup.testSetups;\r\nconst MethodPage = () => {\r\n    const { setSidebar } = useSidebar();\r\n    const { setNavbar } = useNavbar();\r\n    const { queue } = useParams();\r\n\r\n    const pcGroup = new PCGroup(queue ?? \"\");\r\n    const pc = pcGroup.getPC();\r\n\r\n    useEffect(() => {\r\n        setSidebar(`${pcGroup} Methods`, <MethodChooser />);\r\n        setNavbar(\r\n            <>\r\n                <a\r\n                    className={classes.link}\r\n                    href={`../${pc.getIter()}`}\r\n                >{`${pc}`}</a>{\" \"}\r\n                â€¢ {pcGroup.toString()}\r\n            </>,\r\n            <></>\r\n        );\r\n    }, []);\r\n\r\n    // Filter setups that match this PCGroup queue\r\n    const matchingSetups = testSetups.filter((setup) => {\r\n        console.log(typeof setup.getPCGroup().code);\r\n        console.log(typeof pcGroup.code);\r\n        \r\n        console.log(setup.getPCGroup().equals(pcGroup));\r\n        \r\n        \r\n        return setup.getPCGroup().equals(pcGroup);\r\n    });\r\n\r\n    console.log(matchingSetups);\r\n\r\n    // Update logic to use PCGroup\r\n    const matchingMethods = testSetups.filter((setup) =>\r\n        setup.getPCGroup().equals(pcGroup)\r\n    );\r\n\r\n    return (\r\n        <div className={classes.methodPage}>\r\n            <div className={classes.setupList}>\r\n                {matchingSetups.map((setup, idx) => (\r\n                    <SetupPreview key={idx} setup={setup} />\r\n                ))}\r\n            </div>\r\n        </div>\r\n    );\r\n};\r\nexport default MethodPage;\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}