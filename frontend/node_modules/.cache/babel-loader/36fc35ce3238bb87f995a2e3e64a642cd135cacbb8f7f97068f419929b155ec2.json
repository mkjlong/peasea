{"ast":null,"code":"import { compressToEncodedURIComponent } from \"lz-string\";\nexport default async function getFumenFromReplay(replayUrl) {\n  // Check if the URL is a valid Jstris replay URL\n  const target = \"jstris.jezevec10.com\";\n  if (!replayUrl.includes(target)) {\n    throw new Error(\"Invalid replay URL. It must be from jstris.jezevec10.com.\");\n  }\n  const parts = replayUrl.split(\"/\");\n  if (parts.length < 5 || parts[3] !== \"replay\") {\n    throw new Error(\"Invalid replay URL format.\");\n  }\n\n  // Extract replay ID\n  const id = parts[4];\n\n  // Fetch replay data using CORS proxy\n  const proxyUrl = \"https://corsproxy.io/?\".concat(encodeURIComponent(\"https://\".concat(target, \"/replay/data?id=\").concat(id, \"&type=0\")));\n  console.log(proxyUrl);\n  try {\n    const replayResponse = await fetch(proxyUrl);\n    if (!replayResponse.ok) {\n      throw new Error(\"Failed to fetch replay data.\");\n    }\n    const replayData = await replayResponse.text();\n\n    // Compress the replay data for Fumen API compatibility\n    const compressedReplay = compressToEncodedURIComponent(replayData);\n\n    // Send the compressed replay to the Fumen API\n    const fumenResponse = await fetch(\"https://fumen.tstman.net/jstris\", {\n      method: \"POST\",\n      headers: {\n        Accept: \"application/json\",\n        \"Content-Type\": \"application/json\"\n      },\n      body: JSON.stringify({\n        replay: compressedReplay\n      })\n    });\n    if (!fumenResponse.ok) {\n      throw new Error(\"Failed to convert replay to Fumen.\");\n    }\n    const fumenData = await fumenResponse.json();\n\n    // Return the Fumen string\n    return fumenData.fumen;\n  } catch (error) {\n    console.error(\"Error processing replay:\", error);\n    return null;\n  }\n}","map":{"version":3,"names":["compressToEncodedURIComponent","getFumenFromReplay","replayUrl","target","includes","Error","parts","split","length","id","proxyUrl","concat","encodeURIComponent","console","log","replayResponse","fetch","ok","replayData","text","compressedReplay","fumenResponse","method","headers","Accept","body","JSON","stringify","replay","fumenData","json","fumen","error"],"sources":["C:/Stuff/Github/peasea/src/scripts/upload.tsx"],"sourcesContent":["import { compressToEncodedURIComponent } from \"lz-string\";\r\n\r\nexport default async function getFumenFromReplay(replayUrl: string): Promise<string | null> {\r\n  // Check if the URL is a valid Jstris replay URL\r\n  const target = \"jstris.jezevec10.com\";\r\n  if (!replayUrl.includes(target)) {\r\n    throw new Error(\"Invalid replay URL. It must be from jstris.jezevec10.com.\");\r\n  }\r\n\r\n  const parts = replayUrl.split(\"/\");\r\n  if (parts.length < 5 || parts[3] !== \"replay\") {\r\n    throw new Error(\"Invalid replay URL format.\");\r\n  }\r\n\r\n  // Extract replay ID\r\n  const id = parts[4];\r\n\r\n  // Fetch replay data using CORS proxy\r\n  const proxyUrl = `https://corsproxy.io/?${encodeURIComponent(\r\n    `https://${target}/replay/data?id=${id}&type=0`\r\n  )}`;\r\n\r\n  console.log(proxyUrl);\r\n  \r\n\r\n  try {\r\n    const replayResponse = await fetch(proxyUrl);\r\n    if (!replayResponse.ok) {\r\n      throw new Error(\"Failed to fetch replay data.\");\r\n    }\r\n\r\n    const replayData = await replayResponse.text();\r\n\r\n    // Compress the replay data for Fumen API compatibility\r\n    const compressedReplay = compressToEncodedURIComponent(replayData);\r\n\r\n    // Send the compressed replay to the Fumen API\r\n    const fumenResponse = await fetch(`https://fumen.tstman.net/jstris`, {\r\n      method: \"POST\",\r\n      headers: {\r\n        Accept: \"application/json\",\r\n        \"Content-Type\": \"application/json\",\r\n      },\r\n      body: JSON.stringify({ replay: compressedReplay }),\r\n    });\r\n\r\n    if (!fumenResponse.ok) {\r\n      throw new Error(\"Failed to convert replay to Fumen.\");\r\n    }\r\n\r\n    const fumenData = await fumenResponse.json();\r\n\r\n    // Return the Fumen string\r\n    return fumenData.fumen;\r\n  } catch (error) {\r\n    console.error(\"Error processing replay:\", error);\r\n    return null;\r\n  }\r\n}"],"mappings":"AAAA,SAASA,6BAA6B,QAAQ,WAAW;AAEzD,eAAe,eAAeC,kBAAkBA,CAACC,SAAiB,EAA0B;EAC1F;EACA,MAAMC,MAAM,GAAG,sBAAsB;EACrC,IAAI,CAACD,SAAS,CAACE,QAAQ,CAACD,MAAM,CAAC,EAAE;IAC/B,MAAM,IAAIE,KAAK,CAAC,2DAA2D,CAAC;EAC9E;EAEA,MAAMC,KAAK,GAAGJ,SAAS,CAACK,KAAK,CAAC,GAAG,CAAC;EAClC,IAAID,KAAK,CAACE,MAAM,GAAG,CAAC,IAAIF,KAAK,CAAC,CAAC,CAAC,KAAK,QAAQ,EAAE;IAC7C,MAAM,IAAID,KAAK,CAAC,4BAA4B,CAAC;EAC/C;;EAEA;EACA,MAAMI,EAAE,GAAGH,KAAK,CAAC,CAAC,CAAC;;EAEnB;EACA,MAAMI,QAAQ,4BAAAC,MAAA,CAA4BC,kBAAkB,YAAAD,MAAA,CAC/CR,MAAM,sBAAAQ,MAAA,CAAmBF,EAAE,YACxC,CAAC,CAAE;EAEHI,OAAO,CAACC,GAAG,CAACJ,QAAQ,CAAC;EAGrB,IAAI;IACF,MAAMK,cAAc,GAAG,MAAMC,KAAK,CAACN,QAAQ,CAAC;IAC5C,IAAI,CAACK,cAAc,CAACE,EAAE,EAAE;MACtB,MAAM,IAAIZ,KAAK,CAAC,8BAA8B,CAAC;IACjD;IAEA,MAAMa,UAAU,GAAG,MAAMH,cAAc,CAACI,IAAI,CAAC,CAAC;;IAE9C;IACA,MAAMC,gBAAgB,GAAGpB,6BAA6B,CAACkB,UAAU,CAAC;;IAElE;IACA,MAAMG,aAAa,GAAG,MAAML,KAAK,oCAAoC;MACnEM,MAAM,EAAE,MAAM;MACdC,OAAO,EAAE;QACPC,MAAM,EAAE,kBAAkB;QAC1B,cAAc,EAAE;MAClB,CAAC;MACDC,IAAI,EAAEC,IAAI,CAACC,SAAS,CAAC;QAAEC,MAAM,EAAER;MAAiB,CAAC;IACnD,CAAC,CAAC;IAEF,IAAI,CAACC,aAAa,CAACJ,EAAE,EAAE;MACrB,MAAM,IAAIZ,KAAK,CAAC,oCAAoC,CAAC;IACvD;IAEA,MAAMwB,SAAS,GAAG,MAAMR,aAAa,CAACS,IAAI,CAAC,CAAC;;IAE5C;IACA,OAAOD,SAAS,CAACE,KAAK;EACxB,CAAC,CAAC,OAAOC,KAAK,EAAE;IACdnB,OAAO,CAACmB,KAAK,CAAC,0BAA0B,EAAEA,KAAK,CAAC;IAChD,OAAO,IAAI;EACb;AACF","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}