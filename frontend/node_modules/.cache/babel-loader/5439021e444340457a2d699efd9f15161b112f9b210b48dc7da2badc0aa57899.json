{"ast":null,"code":"function checkPieces(queue, pieces) {\n  pieces = pieces.replaceAll(\"*\", \"[TIJLOSZ]\");\n  pieces = pieces.replaceAll(/[^\\[\\]^!TIJLOSZ0-7]/g, \"\");\n  for (let [_, set, count = 1] of Array.from(pieces.matchAll(/((?<=\\[)[TIJLOSZ]{0,7}(?=\\])|[TIJLOSZ])\\]?(?:([!0-7]))?/g))) {\n    if (set.startsWith(\"^\")) set = \"TIJLOSZ\".split(\"\").filter(piece => !set.includes(piece)).join(\"\");\n    count = count === \"!\" ? set.length : Number(count);\n    for (let piece of queue.substring(0, count)) {\n      // GOOD !\n      if (!set.includes(piece)) return false;\n      set = set.replace(piece, \"\");\n    }\n    queue = queue.substring(count, queue.length);\n  }\n  return !queue.length;\n}\n\n/*// Main method to check if a queue belongs to a set\r\n  export default function pieces(queue: string, set: string): boolean {\r\n    console.log(`Queue: ${queue}, Set: ${set}`);\r\n    var [pieces, modifiers] = set.split('{');\r\n    if(modifiers?.endsWith('}'))modifiers = modifiers.slice(0, modifiers.length - 1);\r\n    console.log(`Pieces: ${pieces}, Modifiers: ${modifiers}`);\r\n    \r\n    const queuePieces = pieces.trim();\r\n    return true;\r\n  }\r\n  \r\n  \r\n  \r\n  console.log(pieces(\"IJLS\", \"[IJLS]!{S<3}\"));\r\n  */\nexport default checkPieces;","map":{"version":3,"names":["checkPieces","queue","pieces","replaceAll","_","set","count","Array","from","matchAll","startsWith","split","filter","piece","includes","join","length","Number","substring","replace"],"sources":["C:/Stuff/Github/peasea/src/scripts/pieces.tsx"],"sourcesContent":["function checkPieces(queue: string, pieces: string): boolean {\r\n    pieces = pieces.replaceAll(\"*\", \"[TIJLOSZ]\");\r\n    pieces = pieces.replaceAll(/[^\\[\\]^!TIJLOSZ0-7]/g, \"\");\r\n\r\n\r\n    for (let [_, set, count = 1] of Array.from(pieces.matchAll(/((?<=\\[)[TIJLOSZ]{0,7}(?=\\])|[TIJLOSZ])\\]?(?:([!0-7]))?/g))) {\r\n        \r\n        if (set.startsWith(\"^\")) set = \"TIJLOSZ\".split(\"\").filter(piece => !set.includes(piece)).join(\"\");\r\n        count = count === \"!\" ? set.length : Number(count);\r\n\r\n        for(let piece of queue.substring(0,count)){// GOOD !\r\n            if(!set.includes(piece))return false;\r\n            set = set.replace(piece,\"\");\r\n        }\r\n        queue=queue.substring(count, queue.length);\r\n    }\r\n\r\n    return !queue.length;\r\n}\r\n\r\n/*// Main method to check if a queue belongs to a set\r\n  export default function pieces(queue: string, set: string): boolean {\r\n    console.log(`Queue: ${queue}, Set: ${set}`);\r\n    var [pieces, modifiers] = set.split('{');\r\n    if(modifiers?.endsWith('}'))modifiers = modifiers.slice(0, modifiers.length - 1);\r\n    console.log(`Pieces: ${pieces}, Modifiers: ${modifiers}`);\r\n    \r\n    const queuePieces = pieces.trim();\r\n    return true;\r\n  }\r\n  \r\n  \r\n  \r\n  console.log(pieces(\"IJLS\", \"[IJLS]!{S<3}\"));\r\n  */\r\nexport default checkPieces;\r\n"],"mappings":"AAAA,SAASA,WAAWA,CAACC,KAAa,EAAEC,MAAc,EAAW;EACzDA,MAAM,GAAGA,MAAM,CAACC,UAAU,CAAC,GAAG,EAAE,WAAW,CAAC;EAC5CD,MAAM,GAAGA,MAAM,CAACC,UAAU,CAAC,sBAAsB,EAAE,EAAE,CAAC;EAGtD,KAAK,IAAI,CAACC,CAAC,EAAEC,GAAG,EAAEC,KAAK,GAAG,CAAC,CAAC,IAAIC,KAAK,CAACC,IAAI,CAACN,MAAM,CAACO,QAAQ,CAAC,0DAA0D,CAAC,CAAC,EAAE;IAErH,IAAIJ,GAAG,CAACK,UAAU,CAAC,GAAG,CAAC,EAAEL,GAAG,GAAG,SAAS,CAACM,KAAK,CAAC,EAAE,CAAC,CAACC,MAAM,CAACC,KAAK,IAAI,CAACR,GAAG,CAACS,QAAQ,CAACD,KAAK,CAAC,CAAC,CAACE,IAAI,CAAC,EAAE,CAAC;IACjGT,KAAK,GAAGA,KAAK,KAAK,GAAG,GAAGD,GAAG,CAACW,MAAM,GAAGC,MAAM,CAACX,KAAK,CAAC;IAElD,KAAI,IAAIO,KAAK,IAAIZ,KAAK,CAACiB,SAAS,CAAC,CAAC,EAACZ,KAAK,CAAC,EAAC;MAAC;MACvC,IAAG,CAACD,GAAG,CAACS,QAAQ,CAACD,KAAK,CAAC,EAAC,OAAO,KAAK;MACpCR,GAAG,GAAGA,GAAG,CAACc,OAAO,CAACN,KAAK,EAAC,EAAE,CAAC;IAC/B;IACAZ,KAAK,GAACA,KAAK,CAACiB,SAAS,CAACZ,KAAK,EAAEL,KAAK,CAACe,MAAM,CAAC;EAC9C;EAEA,OAAO,CAACf,KAAK,CAACe,MAAM;AACxB;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAehB,WAAW","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}